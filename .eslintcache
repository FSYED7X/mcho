[{"D:\\REACT\\mhco\\src\\index.js":"1","D:\\REACT\\mhco\\src\\App.js":"2","D:\\REACT\\mhco\\src\\reportWebVitals.js":"3","D:\\REACT\\mhco\\src\\serviceWorkerRegistration.js":"4","D:\\REACT\\mhco\\src\\components\\SideNav\\SideNav.js":"5","D:\\REACT\\mhco\\src\\redux\\screenSlice.js":"6","D:\\REACT\\mhco\\src\\store.js":"7","D:\\REACT\\mhco\\src\\components\\BottomNav\\BottomNav.js":"8","D:\\REACT\\mhco\\src\\screens\\Settings\\Settings.js":"9","D:\\REACT\\mhco\\src\\redux\\authSlice.js":"10","D:\\REACT\\mhco\\src\\components\\Login\\Login.js":"11","D:\\REACT\\mhco\\src\\components\\Calendar\\Calendar.js":"12","D:\\REACT\\mhco\\src\\components\\CurrencyList\\CurrencyList.js":"13","D:\\REACT\\mhco\\src\\components\\Snackbar\\SnackBar.js":"14","D:\\REACT\\mhco\\src\\components\\ToggleButtons\\ToggleButtons.js":"15","D:\\REACT\\mhco\\src\\screens\\Bank\\BankForm.js":"16","D:\\REACT\\mhco\\src\\screens\\Bank\\SavedData.js":"17","D:\\REACT\\mhco\\src\\components\\Navbar\\Navbar.js":"18","D:\\REACT\\mhco\\src\\urlConstants.js":"19","D:\\REACT\\mhco\\src\\Context.js":"20","D:\\REACT\\mhco\\src\\components\\AddBankDialog\\AddBank.js":"21","D:\\REACT\\mhco\\src\\components\\BanksList\\BanksList.js":"22","D:\\REACT\\mhco\\src\\redux\\banksListSlice.js":"23","D:\\REACT\\mhco\\src\\screens\\Invoice\\Form.js":"24","D:\\REACT\\mhco\\src\\screens\\Invoice\\Saved.js":"25","D:\\REACT\\mhco\\src\\redux\\bank\\bankFormSlice.js":"26","D:\\REACT\\mhco\\src\\redux\\bank\\bankSavedDataSlice.js":"27","D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceFormSlice.js":"28","D:\\REACT\\mhco\\src\\redux\\payment\\paymentSavedDataSlice.js":"29","D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceSavedDataSlice.js":"30","D:\\REACT\\mhco\\src\\redux\\payment\\paymentFormSlice.js":"31","D:\\REACT\\mhco\\src\\screens\\Payment\\Form.js":"32","D:\\REACT\\mhco\\src\\screens\\Payment\\Saved.js":"33","D:\\REACT\\mhco\\src\\components\\AddCustomerDialog\\AddCustomer.js":"34","D:\\REACT\\mhco\\src\\components\\CustomersList\\CustomersList.js":"35","D:\\REACT\\mhco\\src\\redux\\customersListSlice.js":"36","D:\\REACT\\mhco\\src\\components\\NoAccess\\NoAccess.js":"37","D:\\REACT\\mhco\\src\\components\\DataTable\\DataTable.js":"38","D:\\REACT\\mhco\\src\\components\\EditCustomerDialog\\EditCustomerDialog.js":"39","D:\\REACT\\mhco\\src\\components\\Menu\\Menu.js":"40","D:\\REACT\\mhco\\src\\redux\\operatorsListSlice.js":"41","D:\\REACT\\mhco\\src\\store\\AppContext\\AppProvider.js":"42","D:\\REACT\\mhco\\src\\store\\AppContext\\AppContext.js":"43","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageBanks\\index.jsx":"44","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageCustomers\\index.jsx":"45","D:\\REACT\\mhco\\src\\screens\\Settings\\OldManageBanks.js":"46","D:\\REACT\\mhco\\src\\adapters\\Firebase\\index.jsx":"47","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\index.jsx":"48","D:\\REACT\\mhco\\src\\constants\\index.jsx":"49","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Oil.jsx":"50","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Add.jsx":"51","D:\\REACT\\mhco\\src\\components\\FormComponents\\MinionInput\\index.jsx":"52","D:\\REACT\\mhco\\src\\components\\FormComponents\\MinionCheckbox\\index.jsx":"53","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Edit.jsx":"54"},{"size":1207,"mtime":1622408118667,"results":"55","hashOfConfig":"56"},{"size":6480,"mtime":1622409488472,"results":"57","hashOfConfig":"56"},{"size":364,"mtime":1614824722031,"results":"58","hashOfConfig":"56"},{"size":5064,"mtime":499162500000,"results":"59","hashOfConfig":"56"},{"size":7462,"mtime":1622318339623,"results":"60","hashOfConfig":"56"},{"size":1979,"mtime":1616242639690,"results":"61","hashOfConfig":"56"},{"size":1382,"mtime":1617651424425,"results":"62","hashOfConfig":"56"},{"size":2091,"mtime":1614626398570,"results":"63","hashOfConfig":"56"},{"size":4784,"mtime":1622318445032,"results":"64","hashOfConfig":"56"},{"size":632,"mtime":1614852013951,"results":"65","hashOfConfig":"56"},{"size":6678,"mtime":1622410318339,"results":"66","hashOfConfig":"56"},{"size":1173,"mtime":1614165924515,"results":"67","hashOfConfig":"56"},{"size":7193,"mtime":1621368302633,"results":"68","hashOfConfig":"56"},{"size":972,"mtime":1610391107489,"results":"69","hashOfConfig":"56"},{"size":2110,"mtime":1614548664634,"results":"70","hashOfConfig":"56"},{"size":10941,"mtime":1622408442866,"results":"71","hashOfConfig":"56"},{"size":4959,"mtime":1622408465641,"results":"72","hashOfConfig":"56"},{"size":12818,"mtime":1622411597233,"results":"73","hashOfConfig":"56"},{"size":366,"mtime":1622654737888,"results":"74","hashOfConfig":"56"},{"size":5373,"mtime":1620090340483,"results":"75","hashOfConfig":"56"},{"size":5088,"mtime":1614712881850,"results":"76","hashOfConfig":"56"},{"size":3890,"mtime":1622372458513,"results":"77","hashOfConfig":"56"},{"size":562,"mtime":1614139388708,"results":"78","hashOfConfig":"56"},{"size":19346,"mtime":1622409114039,"results":"79","hashOfConfig":"56"},{"size":6680,"mtime":1622318453146,"results":"80","hashOfConfig":"56"},{"size":2087,"mtime":1613253769783,"results":"81","hashOfConfig":"56"},{"size":2136,"mtime":1613256842070,"results":"82","hashOfConfig":"56"},{"size":4018,"mtime":1616181553795,"results":"83","hashOfConfig":"56"},{"size":2199,"mtime":1613256875086,"results":"84","hashOfConfig":"56"},{"size":2199,"mtime":1613256870476,"results":"85","hashOfConfig":"56"},{"size":2129,"mtime":1613253886503,"results":"86","hashOfConfig":"56"},{"size":15961,"mtime":1622372682281,"results":"87","hashOfConfig":"56"},{"size":153,"mtime":1613254172513,"results":"88","hashOfConfig":"56"},{"size":5249,"mtime":1616231508454,"results":"89","hashOfConfig":"56"},{"size":4584,"mtime":1622654917769,"results":"90","hashOfConfig":"56"},{"size":784,"mtime":1616509985180,"results":"91","hashOfConfig":"56"},{"size":14320,"mtime":1614850247422,"results":"92","hashOfConfig":"56"},{"size":12292,"mtime":1616095071724,"results":"93","hashOfConfig":"56"},{"size":6805,"mtime":1622370955659,"results":"94","hashOfConfig":"56"},{"size":3207,"mtime":1616606272521,"results":"95","hashOfConfig":"56"},{"size":784,"mtime":1617651391132,"results":"96","hashOfConfig":"56"},{"size":1878,"mtime":1622415329700,"results":"97","hashOfConfig":"56"},{"size":105,"mtime":1616589793374,"results":"98","hashOfConfig":"56"},{"size":4097,"mtime":1622370985150,"results":"99","hashOfConfig":"56"},{"size":5616,"mtime":1622372009227,"results":"100","hashOfConfig":"56"},{"size":15607,"mtime":1622321098662,"results":"101","hashOfConfig":"56"},{"size":1811,"mtime":1622414292535,"results":"102","hashOfConfig":"56"},{"size":233,"mtime":1622415675697,"results":"103","hashOfConfig":"56"},{"size":55,"mtime":1622409994632,"results":"104","hashOfConfig":"56"},{"size":6706,"mtime":1622416005882,"results":"105","hashOfConfig":"56"},{"size":6748,"mtime":1622415920845,"results":"106","hashOfConfig":"56"},{"size":689,"mtime":1622412869086,"results":"107","hashOfConfig":"56"},{"size":577,"mtime":1622413756738,"results":"108","hashOfConfig":"56"},{"size":7183,"mtime":1622416616108,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"15a6qpa",{"filePath":"113","messages":"114","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"112"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"112"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"112"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"112"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"112"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"112"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"112"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"112"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"112"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"112"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"112"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"112"},"D:\\REACT\\mhco\\src\\index.js",[],["240","241"],"D:\\REACT\\mhco\\src\\App.js",["242","243","244","245","246","247","248","249","250"],"import React, { createRef, useEffect } from \"react\";\nimport SideNav from \"./components/SideNav/SideNav\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BottomNav from \"./components/BottomNav/BottomNav\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Settings from \"./screens/Settings/Settings\";\nimport SnackBar from \"./components/Snackbar/SnackBar\";\nimport \"./bootstrap.css\";\nimport \"./App.scss\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\nimport ContextProvider, { useIt } from \"./Context\";\n\nimport AddBank from \"./components/AddBankDialog/AddBank\";\nimport AddCustomer from \"./components/AddCustomerDialog/AddCustomer\";\n\nimport BankForm from \"./screens/Bank/BankForm\";\nimport BankSaved from \"./screens/Bank/SavedData\";\n\nimport InvoiceForm from \"./screens/Invoice/Form\";\nimport InvoiceSaved from \"./screens/Invoice/Saved\";\n\nimport PaymentForm from \"./screens/Payment/Form\";\nimport PaymentSaved from \"./screens/Payment/Saved\";\nimport Login from \"./components/Login/Login\";\nimport NoAccess from \"./components/NoAccess/NoAccess\";\nimport { BASE_URL } from \"./urlConstants\";\nimport { setUser } from \"./redux/authSlice\";\nimport ManageBanks from \"./screens/Settings/ManageBanks\";\nimport ManageCustomers from \"./screens/Settings/ManageCustomers\";\nimport EditCustomer from \"./components/EditCustomerDialog/EditCustomerDialog\";\nimport ManageOperators from \"./screens/Settings/ManageOperators\";\nimport AppProvider from \"./store/AppContext/AppProvider\";\nimport { SnackbarProvider } from \"notistack\";\nimport { IconButton } from \"@material-ui/core\";\nimport { CloseRounded } from \"@material-ui/icons\";\n\nvar _ = require(\"lodash\");\n\nexport const light = {\n  palette: {\n    type: \"light\",\n    primary: {\n      light: \"#3f50b5\",\n      main: \"#3f50b5\",\n      dark: \"#757ce8\",\n      contrastText: \"#fff\",\n    },\n    gradient:\n      \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\n  },\n};\n\nexport const dark = {\n  palette: {\n    type: \"dark\",\n    primary: {\n      light: \"#9fa8da\",\n      main: \"#aab6fe\",\n      dark: \"#002884\",\n      contrastText: \"#fff\",\n    },\n    error: {\n      light: \"#f44336\",\n      main: \"#e57373\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\",\n    },\n    gradient:\n      \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\n  },\n};\n\nfunction App() {\n  const theme = useSelector((state) => state.screen.theme);\n  const user = useSelector((state) => state.auth.user);\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //   if (user) {\n  //     document.getElementById(\"container\").scrollTo(0, 0);\n  //     var myHeaders = new Headers();\n  //     var raw = JSON.stringify({ email: user.email });\n  //     var requestOptions = {\n  //       method: \"POST\",\n  //       headers: myHeaders,\n  //       body: raw,\n  //       redirect: \"follow\",\n  //     };\n  //     fetch(BASE_URL + \"?action=auth2\", requestOptions)\n  //       .then((response) => response.json())\n  //       .then((result) => {\n  //         if (result.result) {\n  //           localStorage.user = JSON.stringify(result.result);\n  //           dispatch(setUser(result.result));\n  //         } else {\n  //           localStorage.clear();\n  //           window.location.reload();\n  //         }\n  //       })\n  //       .catch((error) => {\n  //         console.log(\"error\", error);\n  //       });\n  //   }\n  // }, []);\n\n  const PrivateRoute = ({ component: Component, ...rest }) => {\n    // console.log(rest.tag)\n    return (\n      <Route\n        {...rest}\n        render={(props) =>\n          user ? (\n            <Component {...props} />\n          ) : (\n            <Redirect\n              to={{ pathname: \"/login\", state: { prevPath: rest.path } }}\n            />\n          )\n        }\n      />\n    );\n  };\n\n  // const defaultUrl = _.findKey(user.access, function (o) {\n  //   return o;\n  // });\n\n  const Routes = () => {\n    \n    // console.log(user.access)\n    return (\n      <Switch>\n        <PrivateRoute path=\"/bank/form\" component={BankForm} tag=\"bank\" />\n        <PrivateRoute path=\"/bank/saved\" component={BankSaved} tag=\"bank\" />\n\n        <PrivateRoute\n          path=\"/invoice/form\"\n          component={InvoiceForm}\n          tag=\"invoice\"\n        />\n        <PrivateRoute\n          path=\"/invoice/saved\"\n          component={InvoiceSaved}\n          tag=\"invoice\"\n        />\n        <PrivateRoute\n          path=\"/settings\"\n          exact\n          component={Settings}\n          tag=\"settings\"\n        />\n        <PrivateRoute\n          path=\"/settings/manage/bks\"\n          exact\n          component={ManageBanks}\n          tag=\"settings\"\n        />\n        <PrivateRoute\n          path=\"/settings/manage/customers\"\n          exact\n          component={ManageCustomers}\n          tag=\"settings\"\n        />\n        <PrivateRoute\n          path=\"/settings/manage/operators\"\n          exact\n          component={ManageOperators}\n          tag=\"oerators\"\n        />\n\n        <Route path=\"/noaccess\" component={NoAccess} />\n        <PrivateRoute path=\"/\" exact>\n          <Redirect\n            // to={{ bank: \"/bank/form\", invoice: \"/invoice/form\" }[defaultUrl]}\n            to={\"/bank/form\"}\n          />\n        </PrivateRoute>\n      </Switch>\n    );\n  };\n\n  const notistackRef = createRef();\n  const onClickDismiss = (key) => () => {\n    notistackRef.current.closeSnackbar(key);\n  };\n\n  return (\n    <SnackbarProvider\n      hideIconVariant={false}\n      maxSnack={3}\n      anchorOrigin={{ horizontal: \"left\", vertical: \"bottom\" }}\n      ref={notistackRef}\n      action={(key) => <IconButton onClick={onClickDismiss(key)}><CloseRounded/></IconButton>}\n    >\n      <AppProvider>\n        <ThemeProvider theme={createMuiTheme(theme ? light : dark)}>\n          <CssBaseline />\n\n          <ContextProvider>\n            <Route path=\"/login\" component={Login} />\n\n            <BrowserView>\n              <SideNav>\n                <Routes />\n              </SideNav>\n            </BrowserView>\n\n            <MobileView>\n              <BottomNav>\n                <Routes />\n              </BottomNav>\n            </MobileView>\n\n            <AddBank />\n            <AddCustomer />\n            <EditCustomer />\n            <SnackBar />\n          </ContextProvider>\n        </ThemeProvider>\n      </AppProvider>\n    </SnackbarProvider>\n  );\n}\n\nexport default App;\n","D:\\REACT\\mhco\\src\\reportWebVitals.js",[],"D:\\REACT\\mhco\\src\\serviceWorkerRegistration.js",[],"D:\\REACT\\mhco\\src\\components\\SideNav\\SideNav.js",["251"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  CssBaseline,\r\n  Drawer,\r\n  Divider,\r\n  Container,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { openNav, closeNav } from \"../../redux/screenSlice\";\r\n\r\nimport ArrowBackIosRoundedIcon from \"@material-ui/icons/ArrowBackIosRounded\";\r\nimport AccountBalanceRoundedIcon from \"@material-ui/icons/AccountBalanceRounded\";\r\nimport ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\";\r\nimport AccountBalanceWalletRoundedIcon from \"@material-ui/icons/AccountBalanceWalletRounded\";\r\nimport SettingsRoundedIcon from \"@material-ui/icons/SettingsRounded\";\r\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\r\n\r\nimport \"./SideNav.scss\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useIt } from \"../../Context\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\nconst drawerWidth = 230;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  ListItem: {\r\n    paddingLeft: \"21px\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 21, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    padding: \"0 8px 0 22px\",\r\n    ...theme.mixins.toolbar,\r\n    \"& svg\": {\r\n      height: \"18px\",\r\n      width: \"18px\",\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    \"& .Mui-selected\": {\r\n      background: \"none!important\",\r\n      color: theme.palette.primary.light,\r\n      borderLeft: `3px solid`,\r\n      borderRight: `3px solid`,\r\n      \"& .MuiListItemIcon-root\": {\r\n        color: theme.palette.primary.light,\r\n      },\r\n    },\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n    position: \"relative\",\r\n    height: \"100vh\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  logo: {\r\n    height: \"50px\",\r\n    width: \"100%\",\r\n    objectFit: \"contain\",\r\n  },\r\n}));\r\n\r\nexport default function SideNav({ children }) {\r\n  const sideNavOpen = useSelector((state) => state.screen.sideNavOpen);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const { logout } = useIt();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const user = useSelector((state) => state.auth.user);\r\n  return (\r\n    <div className={`${classes.root} sidenav`}>\r\n      <CssBaseline />\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(\r\n            classes.drawerPaper,\r\n            !sideNavOpen && classes.drawerPaperClose\r\n          ),\r\n        }}\r\n        open={sideNavOpen}\r\n      >\r\n        <div>\r\n          {sideNavOpen ? (\r\n            <div className={classes.toolbarIcon}>\r\n              <h3 className=\"m-0\">Mhco</h3>\r\n              <IconButton onClick={() => dispatch(closeNav())}>\r\n                <ArrowBackIosRoundedIcon />\r\n              </IconButton>\r\n            </div>\r\n          ) : (\r\n            <div className={classes.toolbarIcon}>\r\n              <h3 className=\"text-left m-0\">M</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Divider />\r\n        <Divider />\r\n        <br />\r\n        {user && (\r\n          <ListItem\r\n            component={Link}\r\n            to=\"/bank/form\"\r\n            selected={location.pathname.includes(\"/bank\")}\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n          >\r\n            <ListItemIcon>\r\n              <AccountBalanceRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Bank\" />\r\n          </ListItem>\r\n        )}\r\n\r\n        {user &&(\r\n          <ListItem\r\n            component={Link}\r\n            to=\"/invoice/form\"\r\n            selected={location.pathname.includes(\"/invoice\")}\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n          >\r\n            <ListItemIcon>\r\n              <ReceiptRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"INV & PYMNT\" />\r\n          </ListItem>\r\n        )}\r\n\r\n        {/* <ListItem\r\n          component={Link}\r\n          to=\"/payment/form\"\r\n          selected={location.pathname.includes(\"/payment\")}\r\n          button\r\n          className={`${classes.ListItem} mb-2`}\r\n        >\r\n          <ListItemIcon>\r\n            <AccountBalanceWalletRoundedIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Payments\" />\r\n        </ListItem> */}\r\n\r\n        <Divider />\r\n        <Divider />\r\n        <br />\r\n        <aside style={{ marginTop: \"auto\" }}>\r\n          {!sideNavOpen && (\r\n            <ListItem\r\n              button\r\n              className={`${classes.ListItem} mb-2`}\r\n              onClick={() => dispatch(openNav())}\r\n            >\r\n              <ListItemIcon>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"currentColor\"\r\n                  width=\"20\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path d=\"M4 22h-4v-4h4v4zm0-12h-4v4h4v-4zm0-8h-4v4h4v-4zm3 0v4h17v-4h-17zm0 12h17v-4h-17v4zm0 8h17v-4h-17v4z\" />\r\n                </svg>\r\n              </ListItemIcon>\r\n            </ListItem>\r\n          )}\r\n\r\n          <ListItem\r\n            component={Link}\r\n            to=\"/settings\"\r\n            selected={location.pathname.includes(\"/settings\")}\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n          >\r\n            <ListItemIcon>\r\n              <SettingsRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Settings\" />\r\n          </ListItem>\r\n\r\n          <ListItem\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n            onClick={logout}\r\n          >\r\n            <ListItemIcon>\r\n              <ExitToAppRoundedIcon htmlColor={theme ? \"crimson\" : \"yellow\"} />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary={\r\n                <span style={{ color: theme ? \"crimson\" : \"yellow\" }}>\r\n                  Logout\r\n                </span>\r\n              }\r\n            />\r\n          </ListItem>\r\n        </aside>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <Container\r\n          maxWidth=\"lg\"\r\n          className={`${classes.container}`}\r\n          id=\"container\"\r\n        >\r\n          <Navbar />\r\n          {children}\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\redux\\screenSlice.js",[],"D:\\REACT\\mhco\\src\\store.js",[],"D:\\REACT\\mhco\\src\\components\\BottomNav\\BottomNav.js",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\Settings.js",["252"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { changeTheme } from \"../../redux/screenSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\r\nimport { Divider, Paper, Typography } from \"@material-ui/core\";\r\nimport { ExitToAppRounded } from \"@material-ui/icons\";\r\nimport { MobileView } from \"react-device-detect\";\r\nimport { toggleLogoutDialog } from \"../../redux/authSlice\";\r\nimport KeyboardArrowRightRoundedIcon from \"@material-ui/icons/KeyboardArrowRightRounded\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AccountBalanceRoundedIcon from \"@material-ui/icons/AccountBalanceRounded\";\r\nimport PeopleRoundedIcon from \"@material-ui/icons/PeopleRounded\";\r\nimport DvrRoundedIcon from \"@material-ui/icons/DvrRounded\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // width: '100%',\r\n    // maxWidth: '500px',\r\n    // padding:0x\r\n    // backgroundColor: theme.palette.background.paper,\r\n    // borderRadius:'20px!important'\r\n  },\r\n}));\r\n\r\nexport default function Settings() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.auth.user);\r\nconsole.log(user)\r\n  return (\r\n    <section className=\"row pt-2\">\r\n      <div className=\"col-md-6 col-sm-12 mb-4\">\r\n        <List\r\n          component={Paper}\r\n          className=\"py-0\"\r\n          subheader={\r\n            <ListSubheader className=\"rounded\">Settings</ListSubheader>\r\n          }\r\n        >\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <Brightness4Icon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dark Mode\" />\r\n            <ListItemSecondaryAction>\r\n              <Switch\r\n                edge=\"end\"\r\n                onChange={() => dispatch(changeTheme())}\r\n                checked={!useSelector((state) => state.screen.theme)}\r\n                color=\"primary\"\r\n              />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n\r\n          <MobileView>\r\n            <Divider />\r\n            <Divider />\r\n            <ListItem\r\n              button\r\n              className=\"pt-3\"\r\n              onClick={() => dispatch(toggleLogoutDialog())}\r\n            >\r\n              <ListItemIcon>\r\n                <ExitToAppRounded color=\"error\" />\r\n              </ListItemIcon>\r\n              <ListItemText\r\n                primary={\r\n                  <Typography className=\"fw-bolder\" color=\"error\">\r\n                    Logout\r\n                  </Typography>\r\n                }\r\n              />\r\n            </ListItem>\r\n          </MobileView>\r\n        </List>\r\n      </div>\r\n\r\n      <div className=\"col-md-6 col-sm-12\">\r\n        <List\r\n          // hidden={!user.access.manageBanks}\r\n          component={Paper}\r\n          className=\"py-0 mb-4\"\r\n        >\r\n          <ListItem button component={Link} to=\"/settings/manage/bks\">\r\n            <ListItemIcon>\r\n              <AccountBalanceRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Manage Banks\" />\r\n            <ListItemSecondaryAction>\r\n              <KeyboardArrowRightRoundedIcon />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </List>\r\n\r\n        <List\r\n          // hidden={!user.access.manageCustomers}\r\n          component={Paper}\r\n          className=\"py-0 mb-4\"\r\n        >\r\n          <ListItem button component={Link} to=\"/settings/manage/customers\">\r\n            <ListItemIcon>\r\n              <PeopleRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Manage Customers\" />\r\n            <ListItemSecondaryAction>\r\n              <KeyboardArrowRightRoundedIcon />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </List>\r\n\r\n        <List\r\n          // hidden={!user.access.manageOperators}\r\n          component={Paper}\r\n          className=\"py-0 mb-4\"\r\n        >\r\n          <ListItem button component={Link} to=\"/settings/manage/operators\">\r\n            <ListItemIcon>\r\n              <DvrRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Manage Operators\" />\r\n            <ListItemSecondaryAction>\r\n              <KeyboardArrowRightRoundedIcon />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </List>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\redux\\authSlice.js",[],"D:\\REACT\\mhco\\src\\components\\Login\\Login.js",["253","254","255"],"import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  CssBaseline,\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useContext, useState } from \"react\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { BASE_URL } from \"../../urlConstants\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAccess, setUser } from \"../../redux/authSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { login } from \"../../adapters/Firebase\";\r\nimport AppContext from \"../../store/AppContext/AppContext\";\r\nimport firebase from \"../../adapters/Firebase\";\r\nimport { FIREBASE_USERS_IDENTIFIER } from \"../../constants\";\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    position: \"relative\",\r\n    overflow: \"hidden\",\r\n    padding: isMobile ? \"15% 2%\" : \"7%\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    \"& *\": {\r\n      fontWeight: \"600!important\",\r\n    },\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n    color: \"#fff\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState({\r\n    error: false,\r\n    loading: false,\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { notify, getAccess } = useContext(AppContext);\r\n  const handleSubmit = (e) => {\r\n    setState({ ...state, loading: true });\r\n    e.preventDefault();\r\n\r\n    login(state.email, state.password)\r\n      .then((res) => {\r\n        const { uid, email } = res;\r\n        firebase\r\n          .database()\r\n          .ref(FIREBASE_USERS_IDENTIFIER + \"/\" + uid)\r\n          .once(\"value\", (snapshot) => {\r\n            const data =  snapshot.val();\r\n            localStorage.user = JSON.stringify(data);\r\n            notify(`Welcome ${email}`, \"success\");\r\n            dispatch(setUser(data));\r\n            setState({ ...state, loading: false });\r\n            history.push(\"/bank/form\");\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        notify(err.message, \"error\");\r\n        setState({ ...state, loading: false });\r\n      });\r\n\r\n    // var myHeaders = new Headers();\r\n    // var raw = JSON.stringify({ email: state.email, password: state.password });\r\n    // var requestOptions = {\r\n    //   method: \"POST\",\r\n    //   headers: myHeaders,\r\n    //   body: raw,\r\n    //   redirect: \"follow\",\r\n    // };\r\n\r\n    // fetch(BASE_URL + \"?action=auth\", requestOptions)\r\n    //   .then((response) => response.json())\r\n    //   .then((result) => {\r\n    //     if (result.result) {\r\n    //       localStorage.user = JSON.stringify(result.result);\r\n    //       setState({ ...state, loading: false });\r\n    //       dispatch(setUser(result.result));\r\n    //       history.push(\"/bank/form\")\r\n    //       // props.location.state\r\n    //       //   ? history.push(props.location.state.prevPath)\r\n    //       //   : result.result.access.bank\r\n    //       //   ? history.push(\"/bank/form\")\r\n    //       //   : result.result.access.invoice || result.result.access.payment\r\n    //       //   ? history.push(\"/bank/form\")\r\n    //       //   : history.push(\"/noaccess\");\r\n    //     } else {\r\n    //       setState({ ...state, loading: false, error: true });\r\n    //     }\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     setState({ ...state, loading: false });\r\n    //     console.log(\"error\", error);\r\n    //   });\r\n  };\r\n\r\n  return (\r\n    <section\r\n      component=\"main\"\r\n      className={`col-sm-12 col-md-6 col-lg-5 mx-auto ${classes.root}`}\r\n    >\r\n      <CssBaseline />\r\n      <Paper elevation={isMobile ? 0 : 2} className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" className=\"display-1\">\r\n          Sign in\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={(e) =>\r\n            !state.loading ? handleSubmit(e) : e.preventDefault()\r\n          }\r\n        >\r\n          {state.error && (\r\n            <div class=\"alert alert-danger mt-4\" role=\"alert\">\r\n              Invalid Credentials!\r\n            </div>\r\n          )}\r\n\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            className=\"mt-4\"\r\n            autoFocus\r\n            onChange={(e) => setState({ ...state, email: e.target.value })}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            className=\"mt-4\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={(e) => setState({ ...state, password: e.target.value })}\r\n          />\r\n          <Grid item xs className=\"text-center mt-4 pt-4\">\r\n            <Link href=\"#\" variant=\"body2\">\r\n              Forgot password?\r\n            </Link>\r\n          </Grid>\r\n          <div className=\"col-6 mx-auto\">\r\n            <Button\r\n              disabled={state.loading}\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              className={`${classes.submit} fs-6 bg-primary text-white`}\r\n            >\r\n              {state.loading ? (\r\n                <Fragment>\r\n                  Verifying&nbsp;&nbsp;&nbsp;&nbsp;\r\n                  <i className=\"bricks-white\" />\r\n                </Fragment>\r\n              ) : (\r\n                <Fragment>Sign In</Fragment>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n      <Box className=\"\" mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </section>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\components\\Calendar\\Calendar.js",[],"D:\\REACT\\mhco\\src\\components\\CurrencyList\\CurrencyList.js",[],"D:\\REACT\\mhco\\src\\components\\Snackbar\\SnackBar.js",[],"D:\\REACT\\mhco\\src\\components\\ToggleButtons\\ToggleButtons.js",["256"],"import React, { useEffect } from 'react';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setBankData } from '../../redux/bank/bankFormSlice';\r\n\r\nexport default function ToggleButtons({ value, setValue, amount }) {\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            width: '100%',\r\n            '& button': {\r\n                borderColor: '#B6B6B6',\r\n                width: '100%',\r\n                '&:hover': {\r\n                }\r\n            },\r\n            '& .Mui-selected': {\r\n                background: value === 'credit' ? theme.palette.success.dark : 'linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)',\r\n                color: '#fff',\r\n                '&:hover': {\r\n                    background: value === 'credit' ? theme.palette.success.dark : 'linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)',\r\n                }\r\n            }\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const handleValue = (event, newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n            if (newValue === 'credit') {\r\n                dispatch(setBankData({ key: 'credit', value: amount.current.value }))\r\n                dispatch(setBankData({ key: 'debit', value: '' }))\r\n            } else {\r\n                dispatch(setBankData({ key: 'debit', value: amount.current.value }))\r\n                dispatch(setBankData({ key: 'credit', value: '' }))\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={value}\r\n            exclusive\r\n            onChange={handleValue}\r\n            className={classes.root}\r\n        >\r\n            <ToggleButton value=\"credit\">\r\n                CREDIT\r\n            </ToggleButton>\r\n            <ToggleButton value=\"debit\">\r\n                DEBIT\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    );\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Bank\\BankForm.js",["257","258","259"],"import Calendar from \"../../components/Calendar/Calendar\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport CurrencyList from \"../../components/CurrencyList/CurrencyList\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setBankData, resetBankForm } from \"../../redux/bank/bankFormSlice\";\r\nimport CloudUploadOutlinedIcon from \"@material-ui/icons/CloudUploadOutlined\";\r\nimport RotateLeftOutlinedIcon from \"@material-ui/icons/RotateLeftOutlined\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { openSnackbar, toggleLoading } from \"../../redux/screenSlice\";\r\nimport ToggleButtons from \"../../components/ToggleButtons/ToggleButtons\";\r\nimport WifiOffRoundedIcon from \"@material-ui/icons/WifiOffRounded\";\r\nimport { setbankSavedData } from \"../../redux/bank/bankSavedDataSlice\";\r\nimport { useIt } from \"../../Context\";\r\nimport BanksList from \"../../components/BanksList/BanksList\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { BASE_URL } from \"../../urlConstants\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\nconst isOnline = require(\"is-online\");\r\n\r\nconst transactionType = [\"Cash\", \"Cheque\", \"ATM Online\", \"Pay Order\", \"Other\"];\r\n\r\nfunction BankForm() {\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const dispatch = useDispatch();\r\n  const bankForm = useSelector((state) => state.bankForm);\r\n  const amount = useRef();\r\n  const form = useRef();\r\n  const [selectedValue, setSelectedValue] = useState(\r\n    bankForm.debit ? \"debit\" : \"credit\"\r\n  );\r\n  const loading = useSelector((state) => state.screen.loading);\r\n  const { uploadData, getBanksList } = useIt();\r\n  const user = useSelector((state) => state.auth.user);\r\n  const history = useHistory();\r\n  const access = useSelector((state) => state.auth.user.access.bank.form);\r\n\r\n  useEffect(() => {\r\n    !access && history.push(\"/noaccess\");\r\n  }, []);\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    form.current.checkValidity()\r\n      ? uploadData(\r\n          [bankForm],\r\n          toggleLoading,\r\n          BASE_URL + \"?action=upload\",\r\n          setBankData\r\n        )\r\n      : form.current.reportValidity();\r\n  };\r\n\r\n  const save = (e) => {\r\n    if (form.current.checkValidity()) {\r\n      setData(\"code\", nanoid());\r\n      dispatch(setbankSavedData(bankForm));\r\n      dispatch(\r\n        openSnackbar({ type: \"success\", mesg: \"Data Saved Successfully\" })\r\n      );\r\n    } else form.current.reportValidity();\r\n  };\r\n\r\n  const setData = (key, value) => {\r\n    dispatch(setBankData({ key: key, value: value }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        ref={form}\r\n        className=\"row mt-4 pt-2 justify-content-between\"\r\n        onSubmit={(e) => e.preventDefault()}\r\n      >\r\n        <div className=\"col-lg-6 col-12\">\r\n          <BanksList />\r\n        </div>\r\n\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <div className=\"mb-4 pb-2\">\r\n            <CurrencyList\r\n              currency={bankForm.currency}\r\n              setCurrency={(e) => setData(\"currency\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <TextField\r\n            required={bankForm.type === \"Other\" ? false : true}\r\n            value={bankForm.payeeBank || \"\"}\r\n            onChange={(e) => setData(\"payeeBank\", e.target.value)}\r\n            variant=\"outlined\"\r\n            label=\"Payee's Bank\"\r\n            className=\"w-100 mb-4 pb-2\"\r\n            inputProps={{ className: \"text-capitalize\" }}\r\n          />\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <TextField\r\n            required\r\n            value={bankForm.payee || \"\"}\r\n            onChange={(e) => setData(\"payee\", e.target.value)}\r\n            variant=\"outlined\"\r\n            label=\"Payee Name\"\r\n            className=\"w-100  mb-4 pb-2\"\r\n            inputProps={{ className: \"text-capitalize\" }}\r\n          />\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12 align-self-center\">\r\n          <div className=\"mb-4 pb-2\">\r\n            <Calendar\r\n              date={bankForm.date}\r\n              handler={(e) => setData(\"date\", e.toString())}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                required={bankForm.type === \"Other\" ? false : true}\r\n                value={bankForm.cheque || \"\"}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"cheque\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Cheque/Other no:\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={bankForm.type}\r\n                variant=\"outlined\"\r\n                select\r\n                label=\"Select Type\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                onChange={(e) => setData(\"type\", e.target.value)}\r\n              >\r\n                {transactionType.map((item) => (\r\n                  <MenuItem key={item} value={item}>\r\n                    {\" \"}\r\n                    {item}{\" \"}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </div>\r\n          </section>\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                value={bankForm[selectedValue]}\r\n                inputRef={amount}\r\n                variant=\"outlined\"\r\n                label=\"Amount:\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{ min: \"0.01\", step: \"0.01\" }}\r\n                type=\"number\"\r\n                required\r\n                onChange={(e) => setData(selectedValue, e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {bankForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <div className=\" mb-4 pb-2\">\r\n                <ToggleButtons\r\n                  value={selectedValue}\r\n                  setValue={(e) => setSelectedValue(e)}\r\n                  amount={amount}\r\n                />\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-12\">\r\n              <TextField\r\n                value={bankForm.note1 || \"\"}\r\n                onChange={(e) => setData(\"note1\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Note 1:\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-12\">\r\n              <TextField\r\n                value={bankForm.note2 || \"\"}\r\n                onChange={(e) => setData(\"note2\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Note 2:\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n        <div className=\"col-12\">\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-8 col-sm-12\">\r\n              <TextField\r\n                required={bankForm.type === \"Other\" ? false : true}\r\n                value={bankForm.memo || \"\"}\r\n                onChange={(e) => setData(\"memo\", e.target.value)}\r\n                variant=\"outlined\"\r\n                multiline\r\n                label=\"Memo\"\r\n                className=\"w-100 mb-4\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={bankForm.code || \"\"}\r\n                onChange={(e) => setData(\"code\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Code\"\r\n                className=\"w-100 mb-4\"\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => copy(bankForm.code)}>\r\n                        <FileCopyOutlinedIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n        <div\r\n          className=\"text-center mt-0 mt-lg-4 col-lg-6 col-md-10 col-sm-12 mx-auto p-1\"\r\n          style={{ display: \"flex\", justifyContent: \"space-around\" }}\r\n        >\r\n          <Button\r\n            size=\"large\"\r\n            type=\"button\"\r\n            variant={theme ? \"outlined\" : \"contained\"}\r\n            color=\"secondary\"\r\n            className=\"px-3 border-3\"\r\n            onClick={() => {\r\n              dispatch(resetBankForm());\r\n            }}\r\n          >\r\n            <RotateLeftOutlinedIcon fontSize=\"small\" />\r\n            &nbsp;&nbsp;Reset\r\n          </Button>\r\n\r\n          <Button\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            className={`px-3 mx-0 text-light bg-success`}\r\n            onClick={save}\r\n          >\r\n            <SaveIcon fontSize=\"small\" />\r\n            &nbsp;&nbsp;Save\r\n          </Button>\r\n\r\n          {isOnline ? (\r\n            <Fragment>\r\n              <Button\r\n                size=\"large\"\r\n                disabled={loading ? true : false}\r\n                variant=\"contained\"\r\n                className={`bg-warning text-white`}\r\n                onClick={submit}\r\n              >\r\n                {loading ? (\r\n                  // <i className=\"bricks-white\" />\r\n                  <CircularProgress color=\"inherit\" size=\"25px\" thickness=\"5\" />\r\n                ) : (\r\n                  <span style={{ display: \"flex\" }}>\r\n                    <CloudUploadOutlinedIcon /> &nbsp;&nbsp;Upload\r\n                  </span>\r\n                )}\r\n              </Button>\r\n            </Fragment>\r\n          ) : (\r\n            <Fragment>\r\n              <Button\r\n                size=\"large\"\r\n                disabled\r\n                variant=\"contained\"\r\n                className={`text-light btn-warning`}\r\n              >\r\n                <WifiOffRoundedIcon />\r\n                &nbsp;&nbsp;Offline\r\n              </Button>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BankForm;\r\n","D:\\REACT\\mhco\\src\\screens\\Bank\\SavedData.js",["260"],"import {\r\n  Checkbox,\r\n  Chip,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DeleteRoundedIcon from \"@material-ui/icons/DeleteRounded\";\r\nimport CreateRoundedIcon from \"@material-ui/icons/CreateRounded\";\r\nimport {\r\n  individualBankRequestSelect,\r\n  removeBankSingleRequests,\r\n} from \"../../redux/bank/bankSavedDataSlice\";\r\nimport { setBank } from \"../../redux/bank/bankFormSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useIt } from \"../../Context\";\r\n\r\nvar currencyFormatter = require(\"currency-formatter\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flag: {\r\n    height: \"18px\",\r\n  },\r\n  payee: {\r\n    textTransform: \"capitalize\",\r\n  },\r\n  gif: {\r\n    width: \"fit-content\",\r\n    margin: \"auto\",\r\n    padding: \"2% 5%\",\r\n  },\r\n}));\r\n\r\nfunction SavedData() {\r\n  const dispatch = useDispatch();\r\n  const bankSavedData = useSelector((state) => state.bankSavedData.value);\r\n  const loading = useSelector((state) => state.bankSavedData.loading);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { date } = useIt();\r\n  const access = useSelector((state) => state.auth.user.access.bank.saved);\r\n\r\n  useEffect(() => {\r\n    !access && history.push(\"/noaccess\");\r\n  }, []);\r\n\r\n  const edit = (item, index) => {\r\n    history.push(\"/bank/form\");\r\n    var a = item.data;\r\n    dispatch(setBank(a));\r\n    dispatch(removeBankSingleRequests(index));\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {bankSavedData.length === 0 && (\r\n        <Paper className={classes.gif}>\r\n          {\r\n            theme\r\n              ? \"nodata\"\r\n              : // <img src='/EmptyLight.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n                \"nodata\"\r\n            // <img src='/EmptyDark.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n          }\r\n        </Paper>\r\n      )}\r\n\r\n      <section className=\"\">\r\n        {bankSavedData.map((item, index) => (\r\n          <Paper\r\n            key={index}\r\n            className=\"mb-4 p-2 row p-0 m-0 align-items-center justify-content-between\"\r\n          >\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <div>\r\n                <small>{date(item.data.date)}</small>&nbsp;&nbsp;&nbsp;\r\n                <small>\r\n                  {item.data.acc.CODE + \" || \" + item.data.acc.BANK_NAME}\r\n                </small>\r\n              </div>\r\n\r\n              <div\r\n                className=\"my-3\"\r\n                style={{ display: \"flex\", alignItems: \"center\" }}\r\n              >\r\n                <img\r\n                  className={`border ${classes.flag}`}\r\n                  src={`/flags/${item.data.currency.substring(0, 3)}.png`}\r\n                  alt=\"\"\r\n                  onError={(e) => {\r\n                    e.target.onerror = null;\r\n                    e.target.src = \"/flags/default.png\";\r\n                  }}\r\n                />\r\n                &nbsp;&nbsp;&nbsp;\r\n                <b>\r\n                  {currencyFormatter.format(\r\n                    item.data.credit ? item.data.credit : item.data.debit,\r\n                    { code: item.data.currency.substring(0, 3) }\r\n                  )}\r\n                </b>\r\n                <b>&nbsp;&nbsp;{item.data.type}</b>\r\n                &nbsp;&nbsp;\r\n                {item.data.cheque && (\r\n                  <Chip\r\n                    label={item.data.cheque}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <b className={classes.payee}>{item.data.payee}</b>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-lg-6 col-sm-* text-right align-items-center\">\r\n              <Chip\r\n                className={`text-light ${\r\n                  item.data.credit ? \"bg-success px-1\" : \"bg-danger px-2\"\r\n                }  mx-2`}\r\n                size=\"small\"\r\n                label={item.data.credit ? \"CREDIT\" : \"DEBIT\"}\r\n              />\r\n\r\n              <IconButton\r\n                onClick={() => dispatch(removeBankSingleRequests(index))}\r\n              >\r\n                <DeleteRoundedIcon />\r\n              </IconButton>\r\n\r\n              <IconButton onClick={() => edit(item, index)}>\r\n                <CreateRoundedIcon />\r\n              </IconButton>\r\n\r\n              <Checkbox\r\n                color=\"primary\"\r\n                value={index}\r\n                checked={item.checked}\r\n                onChange={(e) =>\r\n                  dispatch(individualBankRequestSelect(e.target))\r\n                }\r\n                disabled={loading ? true : false}\r\n              />\r\n            </div>\r\n          </Paper>\r\n        ))}\r\n      </section>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default SavedData;\r\n","D:\\REACT\\mhco\\src\\components\\Navbar\\Navbar.js",["261","262","263"],"import {\r\n  Badge,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  IconButton,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport AccountBalanceRoundedIcon from \"@material-ui/icons/AccountBalanceRounded\";\r\nimport ArrowBackRoundedIcon from \"@material-ui/icons/ArrowBackRounded\";\r\nimport {\r\n  toggleAddBankDialog,\r\n  toggleAddCustomerDialog,\r\n} from \"../../redux/screenSlice\";\r\nimport { BrowserView, isMobile, MobileView } from \"react-device-detect\";\r\nimport QueueRoundedIcon from \"@material-ui/icons/QueueRounded\";\r\nimport BookmarksRoundedIcon from \"@material-ui/icons/BookmarksRounded\";\r\nimport WifiOffRoundedIcon from \"@material-ui/icons/WifiOffRounded\";\r\nimport {\r\n  removeBankAllRequest,\r\n  selectAllBankRequests,\r\n  bankSavedToggleLoading,\r\n} from \"../../redux/bank/bankSavedDataSlice\";\r\nimport {\r\n  removePaymentAllRequest,\r\n  selectAllPaymentRequests,\r\n  paymentSavedToggleLoading,\r\n} from \"../../redux/payment/paymentSavedDataSlice\";\r\nimport {\r\n  removeInvoiceAllRequest,\r\n  selectAllInvoiceRequests,\r\n  invoiceSavedToggleLoading,\r\n} from \"../../redux/invoice/invoiceSavedDataSlice\";\r\n\r\nimport BackupRoundedIcon from \"@material-ui/icons/BackupRounded\";\r\nimport { useIt } from \"../../Context\";\r\nimport SettingsRoundedIcon from \"@material-ui/icons/SettingsRounded\";\r\nimport ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\";\r\nimport AccountBalanceWalletRoundedIcon from \"@material-ui/icons/AccountBalanceWalletRounded\";\r\nimport PersonAddRoundedIcon from \"@material-ui/icons/PersonAddRounded\";\r\nimport { BASE_URL } from \"../../urlConstants\";\r\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\r\nimport AppContext from \"../../store/AppContext/AppContext\";\r\n\r\nfunction Navbar() {\r\n  const { isOnline } = useContext(AppContext);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const { dialogs, setDialogs } = useContext(AppContext);\r\n  const bankSavedData = useSelector((state) => state.bankSavedData.value);\r\n  const savedBankLoading = useSelector((state) => state.bankSavedData.loading);\r\n  const bankRequests = useSelector((state) => state.bankSavedData.requests);\r\n\r\n  const invoiceSavedData = useSelector((state) => state.invoiceSavedData.value);\r\n  const savedInvoiceLoading = useSelector(\r\n    (state) => state.invoiceSavedData.loading\r\n  );\r\n  const invoiceRequests = useSelector(\r\n    (state) => state.invoiceSavedData.requests\r\n  );\r\n\r\n  const paymentSavedData = useSelector((state) => state.paymentSavedData.value);\r\n  const savedPaymentLoading = useSelector(\r\n    (state) => state.paymentSavedData.loading\r\n  );\r\n  const paymentRequests = useSelector(\r\n    (state) => state.paymentSavedData.requests\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const { uploadData } = useIt();\r\n\r\n  const uploadBankData = () => {\r\n    var data = [];\r\n    bankRequests.map((index) =>\r\n      data.push(JSON.parse(JSON.stringify(bankSavedData[index].data)))\r\n    );\r\n    uploadData(data, bankSavedToggleLoading, BASE_URL + \"?action=upload\").then(\r\n      (r) => {\r\n        dispatch(removeBankAllRequest());\r\n      }\r\n    );\r\n  };\r\n\r\n  const uploadInvoiceData = () => {\r\n    var data = [];\r\n    invoiceRequests.map((index) =>\r\n      data.push(JSON.parse(JSON.stringify(invoiceSavedData[index].data)))\r\n    );\r\n    uploadData(\r\n      data,\r\n      invoiceSavedToggleLoading,\r\n      BASE_URL + \"?action=uploadInvoicePayment\"\r\n    ).then((r) => {\r\n      dispatch(removeInvoiceAllRequest());\r\n    });\r\n  };\r\n\r\n  const uploadPaymentData = () => {\r\n    var data = [];\r\n    paymentRequests.map((index) =>\r\n      data.push(JSON.parse(JSON.stringify(paymentSavedData[index].data)))\r\n    );\r\n    uploadData(data, paymentSavedToggleLoading, BASE_URL).then((r) => {\r\n      dispatch(removePaymentAllRequest());\r\n    });\r\n  };\r\n\r\n  const aside = {\r\n    \"/bank/form\": {\r\n      title: \"Bank\",\r\n      icon: <AccountBalanceRoundedIcon />,\r\n      action: \"\",\r\n    },\r\n    \"/bank/saved\": {\r\n      title: \"Bank Saved\",\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.push(\"/bank/form\"),\r\n    },\r\n    \"/invoice/form\": {\r\n      title: \"Invoice\",\r\n      icon: <ReceiptRoundedIcon />,\r\n      action: \"\",\r\n    },\r\n    \"/invoice/saved\": {\r\n      title: (\r\n        <Fragment>\r\n          <MobileView>Saved</MobileView>\r\n          <BrowserView>Invoice & Payments Saved</BrowserView>\r\n        </Fragment>\r\n      ),\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.push(\"/invoice/form\"),\r\n    },\r\n    \"/payment/form\": {\r\n      title: \"Payments\",\r\n      icon: <AccountBalanceWalletRoundedIcon />,\r\n      action: \"\",\r\n    },\r\n    \"/payment/saved\": {\r\n      title: \"Payments Saved\",\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.push(\"/payment/form\"),\r\n    },\r\n    \"/settings\": {\r\n      title: \"Settings\",\r\n      icon: <SettingsRoundedIcon />,\r\n      action: \"\",\r\n    },\r\n    \"/settings/manage/bks\": {\r\n      title: \"Manage Banks\",\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.goBack(),\r\n    },\r\n    \"/settings/manage/customers\": {\r\n      title: \"Manage Customers\",\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.goBack(),\r\n    },\r\n    \"/settings/manage/operators\": {\r\n      title: \"Manage Operators\",\r\n      icon: <ArrowBackRoundedIcon />,\r\n      action: () => history.goBack(),\r\n    },\r\n    \"/noaccess\": {\r\n      title: \"Access Blocked\",\r\n      icon: <ErrorOutlineOutlinedIcon color=\"secondary\" />,\r\n      action: \"\",\r\n    },\r\n  }[location.pathname];\r\n\r\n  const asideButton = {\r\n    \"/bank/saved\": (\r\n      <Button\r\n        disabled={savedBankLoading}\r\n        hidden={!bankRequests.length}\r\n        onClick={uploadBankData}\r\n        type=\"button\"\r\n        variant=\"contained\"\r\n        className=\"bg-warning text-white px-2 px-lg-3\"\r\n      >\r\n        {savedBankLoading ? (\r\n          <Fragment>\r\n            Uploading&nbsp;&nbsp;\r\n            <CircularProgress color=\"inherit\" size=\"25px\" thickness=\"5\" />\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <BackupRoundedIcon />\r\n            <BrowserView>&nbsp;&nbsp;Upload</BrowserView>\r\n          </Fragment>\r\n        )}\r\n      </Button>\r\n    ),\r\n    \"/settings/manage/bks\": (\r\n      <Button\r\n        className=\"px-2 px-lg-3\"\r\n        variant=\"contained\"\r\n        color={theme ? \"primary\" : \"secondary\"}\r\n        onClick={() => dispatch(toggleAddBankDialog())}\r\n      >\r\n        <QueueRoundedIcon />\r\n        <BrowserView>&nbsp;&nbsp;ADD</BrowserView>\r\n      </Button>\r\n    ),\r\n    \"/settings/manage/customers\": (\r\n      <Button\r\n        className=\"px-2 px-lg-3\"\r\n        variant=\"contained\"\r\n        color={theme ? \"primary\" : \"secondary\"}\r\n        onClick={() => dispatch(toggleAddCustomerDialog())}\r\n      >\r\n        <PersonAddRoundedIcon />\r\n        &nbsp;&nbsp;ADD\r\n      </Button>\r\n    ),\r\n    \"/settings/manage/operators\": (\r\n      <Button\r\n        className=\"px-2 px-lg-3\"\r\n        variant=\"contained\"\r\n        color={theme ? \"primary\" : \"secondary\"}\r\n        onClick={() =>\r\n          setDialogs({\r\n            ...dialogs,\r\n            operators: {\r\n              ...dialogs.operators,\r\n              add: { ...dialogs.operators.add, open: true },\r\n            },\r\n          })\r\n        }\r\n      >\r\n        <PersonAddRoundedIcon />\r\n        &nbsp;&nbsp;ADD\r\n      </Button>\r\n    ),\r\n    \"/invoice/saved\": (\r\n      <Button\r\n        disabled={savedInvoiceLoading}\r\n        hidden={!invoiceRequests.length}\r\n        onClick={uploadInvoiceData}\r\n        type=\"button\"\r\n        variant=\"contained\"\r\n        className=\"bg-warning text-white px-2 px-lg-3\"\r\n      >\r\n        {savedInvoiceLoading ? (\r\n          <Fragment>\r\n            Uploading&nbsp;&nbsp;\r\n            <CircularProgress color=\"inherit\" size=\"25px\" thickness=\"5\" />\r\n            {/* <i className=\"bricks-white ml-4 mr-2\" /> */}\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <BackupRoundedIcon />\r\n            <BrowserView>&nbsp;&nbsp;Upload</BrowserView>\r\n          </Fragment>\r\n        )}\r\n      </Button>\r\n    ),\r\n    // \"/payment/form\": (\r\n    //   <Button\r\n    //     className=\"px-2 px-lg-3\"\r\n    //     variant=\"contained\"\r\n    //     color={theme ? \"primary\" : \"secondary\"}\r\n    //     onClick={() => dispatch(toggleAddCustomerDialog())}\r\n    //   >\r\n    //     <PersonAddRoundedIcon />\r\n    //     <BrowserView>&nbsp;&nbsp;ADD</BrowserView>\r\n    //   </Button>\r\n    // ),\r\n    // \"/payment/saved\": (\r\n    //   <Button\r\n    //     disabled={savedPaymentLoading}\r\n    //     hidden={!paymentRequests.length}\r\n    //     onClick={uploadPaymentData}\r\n    //     type=\"button\"\r\n    //     variant=\"contained\"\r\n    //     className=\"bg-warning text-white px-2 px-lg-3\"\r\n    //   >\r\n    //     {savedPaymentLoading ? (\r\n    //       <Fragment>\r\n    //         Uploading\r\n    //         <i className=\"bricks-white ml-4 mr-2\" />\r\n    //       </Fragment>\r\n    //     ) : (\r\n    //       <Fragment>\r\n    //         <BackupRoundedIcon />\r\n    //         <BrowserView>&nbsp;&nbsp;Upload</BrowserView>\r\n    //       </Fragment>\r\n    //     )}\r\n    //   </Button>\r\n    // ),\r\n  }[location.pathname];\r\n\r\n  const asideIconButton = {\r\n    \"/bank/form\": (\r\n      <IconButton onClick={() => history.push(\"/bank/saved\")}>\r\n        <Badge badgeContent={bankSavedData.length} color=\"secondary\">\r\n          <BookmarksRoundedIcon />\r\n        </Badge>\r\n      </IconButton>\r\n    ),\r\n    \"/bank/saved\": bankSavedData.length > 0 && (\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={\r\n          bankSavedData.length === bankRequests.length &&\r\n          bankRequests.length > 0\r\n        }\r\n        onChange={(e) => dispatch(selectAllBankRequests(e.target.checked))}\r\n        disabled={savedBankLoading ? true : false}\r\n      />\r\n    ),\r\n    \"/invoice/form\": (\r\n      <IconButton onClick={() => history.push(\"/invoice/saved\")}>\r\n        <Badge badgeContent={invoiceSavedData.length} color=\"secondary\">\r\n          <BookmarksRoundedIcon />\r\n        </Badge>\r\n      </IconButton>\r\n    ),\r\n    \"/invoice/saved\": invoiceSavedData.length > 0 && (\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={\r\n          invoiceSavedData.length === invoiceRequests.length &&\r\n          invoiceRequests.length > 0\r\n        }\r\n        onChange={(e) => dispatch(selectAllInvoiceRequests(e.target.checked))}\r\n        disabled={savedInvoiceLoading ? true : false}\r\n      />\r\n    ),\r\n    // \"/payment/form\": (\r\n    //   <IconButton onClick={() => history.push(\"/payment/saved\")}>\r\n    //     <Badge badgeContent={paymentSavedData.length} color=\"secondary\">\r\n    //       <BookmarksRoundedIcon />\r\n    //     </Badge>\r\n    //   </IconButton>\r\n    // ),\r\n    // \"/payment/saved\": paymentSavedData.length > 0 && (\r\n    //   <Checkbox\r\n    //     color=\"primary\"\r\n    //     className=\"mx-4\"\r\n    //     checked={\r\n    //       paymentSavedData.length === paymentRequests.length &&\r\n    //       paymentRequests.length > 0\r\n    //     }\r\n    //     onChange={(e) => dispatch(selectAllPaymentRequests(e.target.checked))}\r\n    //     disabled={savedPaymentLoading ? true : false}\r\n    //   />\r\n    // ),\r\n  }[location.pathname];\r\n\r\n  return (\r\n    <nav\r\n      className=\"sticky-top mb-4\"\r\n      style={{\r\n        top: isMobile ? \"2%\" : 0,\r\n        boxShadow: `2px -29px 0px 26px ${\r\n          theme ? \"rgba(250,250,250,1)\" : \"rgba(48, 48, 48, 1)\"\r\n        }`,\r\n      }}\r\n    >\r\n      <Paper\r\n        className=\"row m-0 align-items-center border px-1 px-lg-3 py-1 justify-content-between\"\r\n        elevation={0}\r\n      >\r\n        <section className=\"col-lg-8 col-6\">\r\n          {aside && (\r\n            <div className=\"row align-items-center\">\r\n              <div className=\"col-* mr-2\">\r\n                <IconButton onClick={aside.action}>{aside.icon}</IconButton>\r\n              </div>\r\n              <div className=\"navbar-brand col-*\">{aside.title}</div>\r\n            </div>\r\n          )}\r\n        </section>\r\n        <section className=\"col-lg-4 col-6 justify-sel text-right\">\r\n          {asideIconButton}\r\n          {isOnline ? (\r\n            <Fragment>&nbsp;&nbsp;&nbsp;&nbsp;{asideButton}</Fragment>\r\n          ) : (\r\n            <Fragment>\r\n              &nbsp;&nbsp;&nbsp;&nbsp;\r\n              <Button\r\n                type=\"button\"\r\n                disabled\r\n                variant=\"contained\"\r\n                className=\"bg-warning text-white\"\r\n              >\r\n                <WifiOffRoundedIcon />\r\n                <BrowserView>&nbsp;&nbsp;Offline</BrowserView>\r\n              </Button>\r\n            </Fragment>\r\n          )}\r\n        </section>\r\n      </Paper>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\REACT\\mhco\\src\\urlConstants.js",[],"D:\\REACT\\mhco\\src\\Context.js",[],"D:\\REACT\\mhco\\src\\components\\AddBankDialog\\AddBank.js",[],"D:\\REACT\\mhco\\src\\components\\BanksList\\BanksList.js",["264"],"import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport \"./style.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useIt } from \"../../Context\";\r\nimport { setBankData } from \"../../redux/bank/bankFormSlice\";\r\nimport clsx from \"clsx\";\r\nconst isOnline = require('is-online');\r\n\r\n\r\nexport default function BanksList() {\r\n  const loading = useSelector((state) => state.banksList.loading);\r\n  const data = useSelector((state) => state.banksList.data);\r\n  const { getBanksList } = useIt();\r\n  const dispatch = useDispatch();\r\n  const inputValue = useSelector((state) => state.bankForm.acc);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n\r\n  // useEffect(() => {\r\n  //   getBanksList();\r\n  // }, []);\r\n\r\n  return (\r\n    <Autocomplete\r\n      className={`w-100 mb-4 pb-2`}\r\n      value={inputValue}\r\n      onChange={(event, newValue) => {\r\n        dispatch(setBankData({ key: \"acc\", value: newValue }));\r\n      }}\r\n      disabled={loading}\r\n      options={data}\r\n      getOptionLabel={(option) => option.CODE + \" || \" + option.BANK_NAME}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <Fragment>\r\n                {isOnline ? (\r\n                  <Fragment>\r\n                    {loading ? (\r\n                      <i\r\n                        className={clsx({\r\n                          \"bricks-grey\": theme,\r\n                          \"bricks-white\": !theme,\r\n                        })}\r\n                      />\r\n                    ) : (\r\n                      <svg\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={getBanksList}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width={24}\r\n                        height={24}\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        strokeWidth={2}\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                      >\r\n                        <polyline points=\"1 4 1 10 7 10\" />\r\n                        <polyline points=\"23 20 23 14 17 14\" />\r\n                        <path d=\"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15\" />\r\n                      </svg>\r\n                    )}\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>\r\n                    <svg\r\n                      style={{ cursor: \"not-allowed\" }}\r\n                      width={24}\r\n                      height={24}\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      className=\"feather feather-wifi-off\"\r\n                    >\r\n                      <line x1={1} y1={1} x2={23} y2={23} />\r\n                      <path d=\"M16.72 11.06A10.94 10.94 0 0 1 19 12.55\" />\r\n                      <path d=\"M5 12.55a10.94 10.94 0 0 1 5.17-2.39\" />\r\n                      <path d=\"M10.71 5.05A16 16 0 0 1 22.58 9\" />\r\n                      <path d=\"M1.42 9a15.91 15.91 0 0 1 4.7-2.88\" />\r\n                      <path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\" />\r\n                      <line x1={12} y1={20} x2=\"12.01\" y2={20} />\r\n                    </svg>\r\n                  </Fragment>\r\n                )}\r\n              </Fragment>\r\n            ),\r\n          }}\r\n          label=\"Select Bank\"\r\n          variant=\"outlined\"\r\n          required\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\redux\\banksListSlice.js",[],"D:\\REACT\\mhco\\src\\screens\\Invoice\\Form.js",["265"],"import React, { useEffect, useRef } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n  TextField,\r\n  makeStyles,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport Calendar from \"../../components/Calendar/Calendar\";\r\nimport CurrencyList from \"../../components/CurrencyList/CurrencyList\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport {\r\n  setInvoiceData,\r\n  resetInvoiceForm,\r\n  changeFormType,\r\n  toggleLoading,\r\n} from \"../../redux/invoice/invoiceFormSlice\";\r\nimport CloudUploadOutlinedIcon from \"@material-ui/icons/CloudUploadOutlined\";\r\nimport RotateLeftOutlinedIcon from \"@material-ui/icons/RotateLeftOutlined\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { openSnackbar } from \"../../redux/screenSlice\";\r\n\r\nimport WifiOffRoundedIcon from \"@material-ui/icons/WifiOffRounded\";\r\nimport { setInvoiceSavedData } from \"../../redux/invoice/invoiceSavedDataSlice\";\r\nimport { useIt } from \"../../Context\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { GOOGLE_IMAGE, BASE_URL } from \"../../urlConstants\";\r\nimport CustomersList from \"../../components/CustomersList/CustomersList\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { BrowserView } from \"react-device-detect\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\nconst isOnline = require(\"is-online\");\r\n\r\nconst transactionType = [\"Shop\", \"Office\", \"Godam\", \"Other\"];\r\nconst paymentType = [\r\n  \"Cheque\",\r\n  \"Cash\",\r\n  \"Credit/Debit Card\",\r\n  \"Online/Atm\",\r\n  \"Bank Deposit\",\r\n  \"Other\",\r\n];\r\n\r\nexport default function Invoice() {\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const dispatch = useDispatch();\r\n  const invoiceForm = useSelector((state) => state.invoiceForm.formfields);\r\n  const formType = useSelector((state) => state.invoiceForm.formType);\r\n  const form = useRef();\r\n  const loading = useSelector((state) => state.invoiceForm.loading);\r\n  const { uploadData } = useIt();\r\n  const history = useHistory();\r\n  const iaccess = useSelector((state) => state.auth.user.access.invoice.form);\r\n  const paccess = useSelector((state) => state.auth.user.access.payment.form);\r\n\r\n  useEffect(() => {\r\n    if (iaccess && paccess) {\r\n      dispatch(changeFormType(\"invoice\"));\r\n    }\r\n    if (!iaccess && paccess) {\r\n      dispatch(changeFormType(\"payment\"));\r\n    }\r\n    if (!iaccess && !paccess) {\r\n      history.push(\"/noaccess\");\r\n    }\r\n  }, [iaccess, paccess]);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    large: {\r\n      width: theme.spacing(17),\r\n      height: theme.spacing(17),\r\n    },\r\n    root: {\r\n      width: \"100%\",\r\n      \"& button\": {\r\n        borderColor: \"#B6B6B6\",\r\n        width: \"100%\",\r\n        \"&:hover\": {},\r\n      },\r\n      \"& .Mui-selected\": {\r\n        background:\r\n          formType === \"payment\"\r\n            ? theme.palette.success.dark\r\n            : \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\r\n        color: \"#fff\",\r\n        \"&:hover\": {\r\n          background:\r\n            formType === \"payment\"\r\n              ? theme.palette.success.dark\r\n              : \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    form.current.checkValidity()\r\n      ? uploadData(\r\n          [invoiceForm],\r\n          toggleLoading,\r\n          BASE_URL + \"?action=uploadInvoicePayment\",\r\n          setInvoiceData\r\n        )\r\n      : form.current.reportValidity();\r\n  };\r\n\r\n  const setData = (key, value) => {\r\n    dispatch(setInvoiceData({ key: key, value: value }));\r\n  };\r\n\r\n  const save = (e) => {\r\n    if (form.current.checkValidity()) {\r\n      setData(\"code\", nanoid());\r\n      dispatch(setInvoiceSavedData(invoiceForm));\r\n      dispatch(\r\n        openSnackbar({ type: \"success\", mesg: \"Data Saved Successfully\" })\r\n      );\r\n    } else form.current.reportValidity();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      ref={form}\r\n      className=\"row  mt-4 py-2 justify-content-between\"\r\n      onSubmit={(e) => e.preventDefault()}\r\n    >\r\n      <div className=\"col-lg-2 col-12 align-self-center\">\r\n        <div className=\"mb-4 pb-2\">\r\n          <Avatar\r\n            src={GOOGLE_IMAGE + invoiceForm.customer.image}\r\n            className={`mx-auto border ${classes.large}`}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-10 col-12\">\r\n        <section className=\"row align-items-center\">\r\n          <div className=\"col-lg-12\">\r\n            <section className=\"row align-items-center\">\r\n              <div className=\"col-md-6 col-sm-12\">\r\n                <CustomersList\r\n                  value={invoiceForm.customer}\r\n                  setCustomer={(e) => setData(\"customer\", e)}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-6 col-sm-12\">\r\n                <TextField\r\n                  value={invoiceForm.customer.mobile || \"\"}\r\n                  variant=\"outlined\"\r\n                  label=\"Customer Mobile\"\r\n                  className=\"mb-4 pb-2 w-100\"\r\n                  inputProps={{\r\n                    readOnly: true,\r\n                    disabled: true,\r\n                  }}\r\n                />\r\n              </div>\r\n            </section>\r\n          </div>\r\n\r\n          <div className=\"col-md-12\">\r\n            <section className=\"row align-items-center\">\r\n              <div className=\"col-md-6 col-sm-12\">\r\n                <TextField\r\n                  value={invoiceForm.customer.detail || \"\"}\r\n                  variant=\"outlined\"\r\n                  label=\"Customer Detail\"\r\n                  className=\"mb-4 pb-2 w-100\"\r\n                  inputProps={{\r\n                    readOnly: true,\r\n                    disabled: true,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-6 col-sm-12\">\r\n                <div className=\"mb-4 pb-2\">\r\n                  <ToggleButtonGroup\r\n                    value={formType}\r\n                    exclusive\r\n                    onChange={(e, value) => {\r\n                      if (value) dispatch(changeFormType(value));\r\n                    }}\r\n                    aria-label=\"text alignment\"\r\n                    className={classes.root}\r\n                  >\r\n                    {iaccess && (\r\n                      <ToggleButton value=\"invoice\">INVOICE</ToggleButton>\r\n                    )}\r\n                    {paccess && (\r\n                      <ToggleButton value=\"payment\">PAYMENT</ToggleButton>\r\n                    )}\r\n                  </ToggleButtonGroup>\r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div className=\"col-lg-6 col-md-12 align-self-center\">\r\n        <div className=\"mb-4 pb-2\">\r\n          <Calendar\r\n            date={invoiceForm.date}\r\n            handler={(e) => setData(\"date\", e.toString())}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-6 col-12\">\r\n        <section className=\"row align-items-center\">\r\n          <div className=\"col-md-12 mb-4 pb-2\">\r\n            <CurrencyList\r\n              currency={invoiceForm.currency}\r\n              setCurrency={(e) => setData(\"currency\", e)}\r\n            />\r\n          </div>\r\n        </section>\r\n        {formType === \"payment\" && (\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-12\">\r\n              <TextField\r\n                inputProps={{ className: \"text-capitalize\" }}\r\n                required\r\n                value={invoiceForm.account || \"\"}\r\n                onChange={(e) => setData(\"account\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Account\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            </div>\r\n          </section>\r\n        )}\r\n        <section className=\"row align-items-center\">\r\n          <div className=\"col-md-6 col-sm-12\">\r\n            {formType === \"invoice\" ? (\r\n              <TextField\r\n                required\r\n                value={invoiceForm.description || \"\"}\r\n                onChange={(e) => setData(\"description\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Description\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            ) : (\r\n              <TextField\r\n                required={invoiceForm.paymentType === \"Other\" ? false : true}\r\n                value={invoiceForm.cheque || \"\"}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"cheque\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Cheque/Other No.\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"col-md-6 col-sm-12\">\r\n            <TextField\r\n              required\r\n              value={invoiceForm.type}\r\n              variant=\"outlined\"\r\n              select\r\n              label=\"Select Type\"\r\n              className=\"w-100 mb-4 pb-2\"\r\n              onChange={(e) => setData(\"type\", e.target.value)}\r\n            >\r\n              {transactionType.map((item) => (\r\n                <MenuItem key={item} value={item}>\r\n                  {item}\r\n                </MenuItem>\r\n              ))}\r\n            </TextField>\r\n          </div>\r\n        </section>\r\n        {formType === \"invoice\" && (\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={invoiceForm.weight || \"\"}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"weight\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Weight\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                value={invoiceForm.tare || \"\"}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"tare\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Tare\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={invoiceForm.weight - invoiceForm.tare || \"\"}\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                label=\"Total Weight\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{\r\n                  readOnly: true,\r\n                  disabled: true,\r\n                }}\r\n              />\r\n            </div>\r\n          </section>\r\n        )}\r\n\r\n        {formType === \"invoice\" ? (\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={invoiceForm.unitPrice}\r\n                variant=\"outlined\"\r\n                label=\"Unit Price\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{ min: \"0.01\", step: \"0.01\" }}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"unitPrice\", e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {invoiceForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                value={invoiceForm.discount}\r\n                variant=\"outlined\"\r\n                label=\"Discount\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{ min: \"0.00\", step: \"0.01\" }}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"discount\", e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {invoiceForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                value={\r\n                  (invoiceForm.weight - invoiceForm.tare) *\r\n                    invoiceForm.unitPrice -\r\n                    invoiceForm.discount || \"\"\r\n                }\r\n                variant=\"outlined\"\r\n                label=\"Ttl Amt\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                type=\"number\"\r\n                required\r\n                inputProps={{\r\n                  readOnly: true,\r\n                  disabled: true,\r\n                }}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {invoiceForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          </section>\r\n        ) : (\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-6 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={invoiceForm.paymentAmount}\r\n                variant=\"outlined\"\r\n                label=\"Amount\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{ min: \"0.01\", step: \"0.01\" }}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"paymentAmount\", e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {invoiceForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={invoiceForm.paymentType}\r\n                variant=\"outlined\"\r\n                select\r\n                label=\"Payment Type\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                onChange={(e) => setData(\"paymentType\", e.target.value)}\r\n              >\r\n                {paymentType.map((item) => (\r\n                  <MenuItem key={item} value={item}>\r\n                    {item}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <section className=\"row align-items-center\">\r\n          <div className=\"col-12\">\r\n            {formType === \"payment\" ? (\r\n              <TextField\r\n                required={invoiceForm.paymentType === \"Other\" ? false : true}\r\n                value={invoiceForm.memo || \"\"}\r\n                onChange={(e) => setData(\"memo\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Memo\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            ) : (\r\n              <TextField\r\n                required\r\n                value={invoiceForm.reference || \"\"}\r\n                onChange={(e) => setData(\"reference\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Reference\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"col-md-8 col-sm-12\">\r\n            {formType === \"payment\" ? (\r\n              <TextField\r\n                value={invoiceForm.paymentNote || \"\"}\r\n                onChange={(e) => setData(\"paymentNote\", e.target.value)}\r\n                variant=\"outlined\"\r\n                multiline\r\n                label=\"Note\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            ) : (\r\n              <TextField\r\n                value={invoiceForm.invoiceNote || \"\"}\r\n                onChange={(e) => setData(\"invoiceNote\", e.target.value)}\r\n                variant=\"outlined\"\r\n                multiline\r\n                label=\"Note\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"col-md-4 col-sm-12\">\r\n            <TextField\r\n              required\r\n              value={invoiceForm.code || \"\"}\r\n              onChange={(e) => setData(\"code\", e.target.value)}\r\n              variant=\"outlined\"\r\n              label=\"Code\"\r\n              inputProps={{\r\n                readOnly: true,\r\n                disabled: true,\r\n              }}\r\n              className=\"w-100 mb-4 pb-2\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={() => copy(invoiceForm.code)}>\r\n                      <FileCopyOutlinedIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </div>\r\n        </section>\r\n      </div>\r\n      <div\r\n        className=\"text-center mt-0 mt-lg-4 col-lg-6 col-md-10 col-sm-12 mx-auto p-1\"\r\n        style={{ display: \"flex\", justifyContent: \"space-around\" }}\r\n      >\r\n        <Button\r\n          size=\"large\"\r\n          type=\"button\"\r\n          variant={theme ? \"outlined\" : \"contained\"}\r\n          color=\"secondary\"\r\n          className=\"px-3 border-3\"\r\n          onClick={() => {\r\n            dispatch(resetInvoiceForm());\r\n          }}\r\n        >\r\n          <RotateLeftOutlinedIcon fontSize=\"small\" />\r\n          &nbsp;&nbsp;Reset\r\n        </Button>\r\n\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          className={`px-3 mx-0 text-light bg-success`}\r\n          onClick={save}\r\n        >\r\n          <SaveIcon fontSize=\"small\" />\r\n          &nbsp;&nbsp;Save\r\n        </Button>\r\n        {isOnline ? (\r\n          <Fragment>\r\n            <Button\r\n              size=\"large\"\r\n              disabled={loading ? true : false}\r\n              variant=\"contained\"\r\n              className={`bg-warning text-white`}\r\n              onClick={submit}\r\n            >\r\n              {loading ? (\r\n                // <i className=\"bricks-white\" />\r\n                <CircularProgress color=\"inherit\" size=\"25px\" thickness=\"5\" />\r\n              ) : (\r\n                <span style={{ display: \"flex\" }}>\r\n                  <CloudUploadOutlinedIcon />\r\n                  <BrowserView>&nbsp;&nbsp;Upload</BrowserView>\r\n                </span>\r\n              )}\r\n            </Button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <Button\r\n              size=\"large\"\r\n              disabled\r\n              variant=\"contained\"\r\n              className={`text-light btn-warning`}\r\n            >\r\n              <WifiOffRoundedIcon />\r\n              &nbsp;&nbsp;Offline\r\n            </Button>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Invoice\\Saved.js",["266"],"import {\r\n  Checkbox,\r\n  Chip,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DeleteRoundedIcon from \"@material-ui/icons/DeleteRounded\";\r\nimport CreateRoundedIcon from \"@material-ui/icons/CreateRounded\";\r\nimport {\r\n  individualInvoiceRequestSelect,\r\n  removeInvoiceSingleRequests,\r\n} from \"../../redux/invoice/invoiceSavedDataSlice\";\r\nimport { setInvoice } from \"../../redux/invoice/invoiceFormSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useIt } from \"../../Context\";\r\nimport { BrowserView } from \"react-device-detect\";\r\n\r\nvar currencyFormatter = require(\"currency-formatter\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flag: {\r\n    height: \"18px\",\r\n  },\r\n  payee: {\r\n    textTransform: \"capitalize\",\r\n  },\r\n  gif: {\r\n    width: \"fit-content\",\r\n    margin: \"auto\",\r\n    padding: \"2% 5%\",\r\n  },\r\n}));\r\n\r\nfunction Saved() {\r\n  const dispatch = useDispatch();\r\n  const invoiceSavedData = useSelector((state) => state.invoiceSavedData.value);\r\n  const loading = useSelector((state) => state.invoiceSavedData.loading);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { date } = useIt();\r\n  const user = useSelector((state) => state.auth.user);\r\n\r\n  // useEffect(() => {\r\n  //   !user.access.invoice && !user.access.payment && history.push(\"/noaccess\");\r\n  // }, [user]);\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\"body\").scrollTo(0, 0);\r\n  });\r\n\r\n  const edit = (item, index) => {\r\n    history.push(\"/invoice/form\");\r\n    var a = item.data;\r\n    dispatch(setInvoice(a));\r\n    dispatch(removeInvoiceSingleRequests(index));\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {invoiceSavedData.length === 0 && (\r\n        <Paper className={classes.gif}>\r\n          {\r\n            theme\r\n              ? \"nodata\"\r\n              : // <img src='/EmptyLight.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n                \"nodata\"\r\n            // <img src='/EmptyDark.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n          }\r\n        </Paper>\r\n      )}\r\n\r\n      <section className=\"\">\r\n        {invoiceSavedData.map((item, index) => (\r\n          <Paper\r\n            key={index}\r\n            className=\"mb-4 p-2 row p-0 m-0 align-items-center justify-content-between\"\r\n          >\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <div>\r\n                <small>{date(item.data.date)}</small>&nbsp;&nbsp;&nbsp;\r\n                <small>\r\n                  {item.data.customer.mobile + \" || \" + item.data.customer.name}\r\n                </small>\r\n              </div>\r\n\r\n              <div\r\n                className=\"my-3\"\r\n                style={{ display: \"flex\", alignItems: \"center\" }}\r\n              >\r\n                <img\r\n                  className={`border ${classes.flag}`}\r\n                  src={`/flags/${item.data.currency.substring(0, 3)}.png`}\r\n                  alt=\"\"\r\n                  onError={(e) => {\r\n                    e.target.onerror = null;\r\n                    e.target.src = \"/flags/default.png\";\r\n                  }}\r\n                />\r\n                &nbsp;&nbsp;&nbsp;\r\n                <b>\r\n                  {currencyFormatter.format(item.data.paymentAmount, {\r\n                    code: item.data.currency.substring(0, 3),\r\n                  })}\r\n                </b>\r\n                <b>&nbsp;&nbsp;{item.data.type}</b>\r\n                &nbsp;&nbsp;\r\n                {item.data.cheque && (\r\n                  <Chip\r\n                    label={item.data.cheque}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <BrowserView>\r\n                <div\r\n                  className=\"my-3\"\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  {item.data.weight && (\r\n                    <table\r\n                      border=\"1\"\r\n                      cellPadding=\"10\"\r\n                      className={!theme && \"text-light\"}\r\n                    >\r\n                      <tr className=\"text-center\">\r\n                        <th>WGT</th>\r\n                        <th>TARE</th>\r\n                        <th>T WGT</th>\r\n                        <th>PRICE</th>\r\n                        <th>DISC</th>\r\n                        <th>T AMT</th>\r\n                      </tr>\r\n                      <tr className=\"text-center\">\r\n                        <td>{item.data.weight}</td>\r\n                        <td>{item.data.tare}</td>\r\n                        <td>{item.data.weight - item.data.tare}</td>\r\n                        <td>{item.data.unitPrice}</td>\r\n                        <td>{item.data.discount}</td>\r\n                        <td>\r\n                          {Math.round(\r\n                            (item.data.weight - item.data.tare) *\r\n                              item.data.unitPrice -\r\n                              item.data.discount,\r\n                            2\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                  )}\r\n                </div>\r\n              </BrowserView>\r\n\r\n              {/* <div>\r\n                                <b className={classes.payee}>{item.data.payee}</b>\r\n                            </div> */}\r\n            </div>\r\n\r\n            <div className=\"col-lg-6 col-sm-* text-right align-items-center\">\r\n              <Chip\r\n                className={`text-light ${\r\n                  item.data.memo ? \"bg-success px-1\" : \"bg-danger px-2\"\r\n                }  mx-2`}\r\n                size=\"small\"\r\n                label={item.data.memo ? \"PAYMENT\" : \"INVOICE\"}\r\n              />\r\n\r\n              <IconButton\r\n                onClick={() => dispatch(removeInvoiceSingleRequests(index))}\r\n              >\r\n                <DeleteRoundedIcon />\r\n              </IconButton>\r\n\r\n              <IconButton onClick={() => edit(item, index)}>\r\n                <CreateRoundedIcon />\r\n              </IconButton>\r\n\r\n              <Checkbox\r\n                color=\"primary\"\r\n                value={index}\r\n                checked={item.checked}\r\n                onChange={(e) =>\r\n                  dispatch(individualInvoiceRequestSelect(e.target))\r\n                }\r\n                disabled={loading ? true : false}\r\n              />\r\n            </div>\r\n          </Paper>\r\n        ))}\r\n      </section>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Saved;\r\n","D:\\REACT\\mhco\\src\\redux\\bank\\bankFormSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\bank\\bankSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceFormSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\payment\\paymentSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\payment\\paymentFormSlice.js",[],"D:\\REACT\\mhco\\src\\screens\\Payment\\Form.js",["267","268","269"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IconButton, InputAdornment, MenuItem, TextField } from '@material-ui/core';\r\nimport { setPaymentData } from '../../redux/payment/paymentFormSlice';\r\nimport Calendar from '../../components/Calendar/Calendar'\r\nimport CurrencyList from '../../components/CurrencyList/CurrencyList';\r\nimport copy from 'copy-to-clipboard';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    large: {\r\n        width: theme.spacing(17),\r\n        height: theme.spacing(17),\r\n    },\r\n}));\r\nconst transactionType = ['Shop', 'Office', 'Godam', 'Other']\r\nconst paymentType = ['Cheque', 'Cash', 'Credit/Debit Card', 'Online/Atm', 'Bank Deposit']\r\n\r\nexport default function Payment() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const paymentForm = useSelector(state => state.paymentForm)\r\n    const amount = useRef()\r\n    const form = useRef()\r\n    const [selectedValue, setSelectedValue] = useState(paymentForm.debit ? 'debit' : 'credit')\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault()\r\n        // form.current.checkValidity() ? uploadData([paymentForm], toggleLoading, BASE_URL) : form.current.reportValidity()\r\n    }\r\n\r\n    const setData = (key, value) => {\r\n        dispatch(setPaymentData({ key: key, value: value }))\r\n    }\r\n\r\n    return (\r\n        <form ref={form} className='row py-2 justify-content-between' onSubmit={(e) => e.preventDefault()}>\r\n            <div className=\"col-md-2 col-12 align-self-center\">\r\n                <div className='mb-4 pb-2'>\r\n                    <Avatar src=\"/static/images/avatar/1.jpg\" className={`mx-auto ${classes.large}`} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-10 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <section className=\"row align-items-center\">\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Search Customer\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Customer Mobile\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                        <section className=\"row align-items-center\">\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Customer Detail\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <div className=\"mb-4 pb-2\">\r\n                                    <CurrencyList currency={paymentForm.currency} setCurrency={(e) => setData('currency', e)} />\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            <div className='col-md-6 col-sm-12 align-self-center'>\r\n                <div className=\"mb-4 pb-2\">\r\n                    <Calendar date={paymentForm.date} handler={(e) => setData('date', e.toString())} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Account\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    \r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Cheque/Other No.\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Select Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {transactionType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Amount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Payment Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {paymentType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                    {/* <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Discount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div> */}\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Note\" className='mb-4 pb-2 w-100' required />\r\n                    </div>\r\n\r\n                </section>\r\n            </div>\r\n\r\n            <div className=\"col-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-8 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.memo || ''} onChange={(e) => setData('memo', e.target.value)} variant=\"outlined\" multiline label=\"Memo\" className='w-100 mb-4' />\r\n                    </div>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <TextField\r\n                            required\r\n                            value={paymentForm.code || ''}\r\n                            onChange={(e) => setData('code', e.target.value)}\r\n                            variant=\"outlined\"\r\n                            label=\"Code\" disabled className='w-100 mb-4'\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => copy(paymentForm.code)}>\r\n                                            <FileCopyOutlinedIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            {/* <div className=\"col-md-6 col-sm-12\">\r\n                <div className=\"mb-4 pb-2\">\r\n                    <CurrencyList currency={paymentForm.currency} setCurrency={(e) => setData('currency', e)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.payeeBank || ''} onChange={(e) => setData('payeeBank', e.target.value)} variant=\"outlined\" label=\"Payee's Bank\" className='w-100 mb-4 pb-2' inputProps={{ className: 'text-capitalize' }} />\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <TextField required value={paymentForm.payee || ''} onChange={(e) => setData('payee', e.target.value)} variant=\"outlined\" label=\"Payee Name\" className='w-100  mb-4 pb-2' inputProps={{ className: 'text-capitalize' }} />\r\n            </div>\r\n            <div className='col-md-6 col-sm-12 align-self-center'>\r\n                <div className=\"mb-4 pb-2\">\r\n                    <Calendar date={paymentForm.date} handler={(e) => setData('date', e.toString())} />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Cheque/Other no\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Select Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {transactionType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Amount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <div className=\" mb-4 pb-2\">\r\n                            <ToggleButtons value={selectedValue} setValue={(e) => setSelectedValue(e)} amount={amount} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Note 1\" className='mb-4 pb-2 w-100' />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Note 2\" className='mb-4 pb-2 w-100' />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <div className=\"col-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-8 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.memo || ''} onChange={(e) => setData('memo', e.target.value)} variant=\"outlined\" multiline label=\"Memo\" className='w-100 mb-4' />\r\n                    </div>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <TextField\r\n                            required\r\n                            value={paymentForm.code || ''}\r\n                            onChange={(e) => setData('code', e.target.value)}\r\n                            variant=\"outlined\"\r\n                            label=\"Code\" disabled className='w-100 mb-4'\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => copy(paymentForm.code)}>\r\n                                            <FileCopyOutlinedIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </div> */}\r\n            {/* <div className=\"text-center mt-0 mt-lg-4 col-lg-5 col-md-7 col-sm-12 mx-auto p-1\" style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                <Button size=\"large\" type=\"button\" variant={theme ? \"outlined\" : \"contained\"} color=\"secondary\" className=\"px-3 border-3\" onClick={() => { dispatch(resetBankForm()); }}><RotateLeftOutlinedIcon fontSize=\"small\" />&nbsp;&nbsp;Reset</Button>\r\n\r\n                <Button size=\"large\" variant=\"contained\" className={`px-3 mx-0 text-light bg-success`} onClick={save}><SaveIcon fontSize=\"small\" />&nbsp;&nbsp;Save</Button>\r\n\r\n                <Online>\r\n                    <Button size=\"large\" disabled={loading ? true : false} variant=\"contained\" className={`bg-warning text-white`} onClick={submit}>{loading ? <i className=\"bricks-white\" /> : <span style={{ display: 'flex' }}><CloudUploadOutlinedIcon /> &nbsp;&nbsp;Upload</span>}</Button>\r\n                </Online>\r\n\r\n                <Offline>\r\n                    <Button size=\"large\" disabled variant=\"contained\" className={`text-light btn-warning`}><WifiOffRoundedIcon />&nbsp;&nbsp;Offline</Button>\r\n                </Offline>\r\n            </div> */}\r\n        </form>\r\n    )\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Payment\\Saved.js",[],"D:\\REACT\\mhco\\src\\components\\AddCustomerDialog\\AddCustomer.js",[],"D:\\REACT\\mhco\\src\\components\\CustomersList\\CustomersList.js",["270","271","272","273","274"],"D:\\REACT\\mhco\\src\\redux\\customersListSlice.js",[],"D:\\REACT\\mhco\\src\\components\\NoAccess\\NoAccess.js",[],"D:\\REACT\\mhco\\src\\components\\DataTable\\DataTable.js",["275","276","277"],"D:\\REACT\\mhco\\src\\components\\EditCustomerDialog\\EditCustomerDialog.js",["278","279","280"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  openSnackbar,\r\n  toggleEditCustomerDialog,\r\n} from \"../../redux/screenSlice\";\r\nimport { FormControlLabel, Switch, TextField } from \"@material-ui/core\";\r\nimport { BASE_URL, GOOGLE_IMAGE } from \"../../urlConstants\";\r\n\r\nimport { ReactImgInput } from \"react-img-input\";\r\nimport \"react-img-input/dist/index.css\";\r\nimport { useIt } from \"../../Context\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport default function EditCustomer() {\r\n  const customerList = useSelector((state) => state.customersList.data);\r\n  const customer = _.find(customerList, {\r\n    ROW: useSelector((state) => state.screen.customerToEdit),\r\n  });\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const dispatch = useDispatch();\r\n  const open = useSelector((state) => state.screen.editCustomerDialog);\r\n  const close = () => {\r\n    setEdited({});\r\n    dispatch(toggleEditCustomerDialog(\"\"));\r\n    setError(false);\r\n  };\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const form = useRef();\r\n  const [Image, setImage] = useState();\r\n  const [edited, setEdited] = useState({});\r\n  const themee = useSelector((state) => state.screen.theme);\r\n\r\n  const { getCustomersList } = useIt();\r\n\r\n  useEffect(() => {\r\n    console.log(edited);\r\n  }, [edited]);\r\n\r\n  const config = customer && {\r\n    size: 120,\r\n    captureBtn: {\r\n      bg: \"crimson\",\r\n      color: \"#fff\",\r\n    },\r\n    cropBtn: {\r\n      bg: \"#F4B230\",\r\n      color: \"#fff\",\r\n    },\r\n    defaultImg: GOOGLE_IMAGE + customer.IMAGE,\r\n    theme: themee ? \"light\" : \"dark\",\r\n    compression: {\r\n      maxSizeMB: 0.1,\r\n      maxWidthOrHeight: 500,\r\n      useWebWorker: true,\r\n    },\r\n  };\r\n\r\n  const editCustomer = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    var data = { ...edited, ROW: customer.ROW };\r\n    var raw = JSON.stringify(data);\r\n    console.log(data);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    //   {\r\n    //     \"NAME\": \"FAHADDD\",\r\n    //     \"MOBILE\": \"02121212000\",\r\n    //     \"DETAILS\": \"ERW\",\r\n    //     \"IMAGE\": \"\"\r\n    //     \"ROW\": 4\r\n    // }\r\n\r\n    fetch(BASE_URL + \"?action=editCustomer\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        if (result.result === \"error\") setError(true);\r\n        else {\r\n          setError(false);\r\n          dispatch(\r\n            openSnackbar({\r\n              mesg: \"Customer Edited Successfully\",\r\n              type: \"success\",\r\n            })\r\n          );\r\n          getCustomersList();\r\n          close();\r\n        }\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        setError(true);\r\n        console.log(\"error\", error);\r\n      });\r\n  };\r\n\r\n  return customer ? (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={open}\r\n      onClose={close}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n      fullWidth\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n    >\r\n      <DialogTitle\r\n        className=\"sticky-top\"\r\n        style={{ backgroundColor: \"inherit\" }}\r\n      >\r\n        {\"Edit Customer\"}\r\n      </DialogTitle>\r\n\r\n      <div style={{ width: \"fit-content\" }} className=\"mx-auto mb-4\">\r\n        <ReactImgInput\r\n          config={config}\r\n          setOutput={(img) => setEdited({ ...edited, IMAGE: img })}\r\n        />\r\n      </div>\r\n      <form onSubmit={editCustomer} ref={form}>\r\n        <DialogContent>\r\n          {/* <input\r\n            name=\"image\"\r\n            type=\"hidden\"\r\n            value={Image}\r\n          /> */}\r\n          <p className=\"mb-2 \">Customer Name:</p>\r\n          <TextField\r\n            name=\"name\"\r\n            required\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className=\"fw-bolder mb-4\"\r\n            defaultValue={customer.NAME}\r\n            onChange={(e) => setEdited({ ...edited, NAME: e.target.value })}\r\n          />\r\n          <p className=\"mb-2\">Mobile Number:</p>\r\n          <TextField\r\n            name=\"mobile\"\r\n            required\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className=\"fw-bolder mb-4\"\r\n            defaultValue={customer.MOBILE}\r\n            onChange={(e) => setEdited({ ...edited, MOBILE: e.target.value })}\r\n          />\r\n          <p className=\"mb-2\">Detail:</p>\r\n          <TextField\r\n            name=\"detail\"\r\n            required\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className=\"fw-bolder mb-4\"\r\n            defaultValue={customer.DETAILS}\r\n            onChange={(e) => setEdited({ ...edited, DETAILS: e.target.value })}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions className=\"pb-3 px-4 justify-content-between\">\r\n          {/* <div>asd</div> */}\r\n          {/* <div>\r\n            <Alert hidden={!error} variant=\"filled\" severity=\"error\">\r\n              Customer Already exists!\r\n            </Alert>\r\n          </div> */}\r\n\r\n          <FormControlLabel\r\n            label=\"Active\"\r\n            labelPlacement=\"start\"\r\n            control={\r\n              <Switch\r\n                defaultChecked={customer.STATUS}\r\n                onChange={(e) =>\r\n                  setEdited({ ...edited, STATUS: e.target.checked })\r\n                }\r\n                name=\"active\"\r\n              />\r\n            }\r\n          />\r\n\r\n          <div>\r\n            <Button\r\n              disabled={loading}\r\n              size=\"large\"\r\n              type=\"button\"\r\n              onClick={close}\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n              className={`bg-danger text-white`}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Button\r\n              disabled={loading || !edited}\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              className={`bg-warning text-white position-relative`}\r\n            >\r\n              &nbsp;{!loading ? \"SAVE\" : <i className=\"bricks-white\" />}&nbsp;\r\n            </Button>\r\n          </div>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\components\\Menu\\Menu.js",["281","282","283","284"],"import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nconst StyledMenu = withStyles({\r\n  paper: {\r\n    border: \"1px solid #d3d4d5\",\r\n  },\r\n})((props) => (\r\n  <Menu\r\n    elevation={0}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: \"bottom\",\r\n      horizontal: \"center\",\r\n    }}\r\n    transformOrigin={{\r\n      vertical: \"top\",\r\n      horizontal: \"center\",\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n  root: {\r\n    \"&:focus\": {\r\n      backgroundColor: theme.palette.secondary.main,\r\n      \"& .MuiListItemIcon-root, & .MuiListItemText-secondary\": {\r\n        color: theme.palette.common.white,\r\n      },\r\n    },\r\n  },\r\n}))(MenuItem);\r\n\r\nexport default function CustomizedMenus({\r\n  menu,\r\n  closeMenu,\r\n  setFilter,\r\n  filter,\r\n}) {\r\n  //   const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  //   const handleClick = (event) => {\r\n  //     setAnchorEl(event.currentTarget);\r\n  //   };\r\n\r\n  //   const handleClose = () => {\r\n  //     setAnchorEl(null);\r\n  //   };\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button\r\n        aria-controls=\"customized-menu\"\r\n        aria-haspopup=\"true\"\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={handleClick}\r\n      >\r\n        Open Menu\r\n      </Button> */}\r\n\r\n      <StyledMenu\r\n        id=\"customized-menu\"\r\n        anchorEl={menu}\r\n        keepMounted\r\n        open={Boolean(menu)}\r\n        onClose={closeMenu}\r\n      >\r\n        <StyledMenuItem\r\n          selected={filter === \"all\"}\r\n          onClick={() => {\r\n            setFilter(\"all\");\r\n            closeMenu();\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <GroupIcon fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText secondary=\"All\" />\r\n        </StyledMenuItem>\r\n        <StyledMenuItem\r\n          selected={filter === \"active\"}\r\n          onClick={() => {\r\n            setFilter(\"active\");\r\n            closeMenu();\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <CheckCircleOutlineIcon fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText secondary=\"Active\" />\r\n        </StyledMenuItem>\r\n        <StyledMenuItem\r\n          selected={filter === \"inactive\"}\r\n          onClick={() => {\r\n            setFilter(\"inactive\");\r\n            closeMenu();\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <HighlightOffIcon fontSize=\"small\" />\r\n          </ListItemIcon>\r\n          <ListItemText secondary=\"Inactive\" />\r\n        </StyledMenuItem>\r\n      </StyledMenu>\r\n    </div>\r\n  );\r\n}\r\n",["285","286"],"D:\\REACT\\mhco\\src\\redux\\operatorsListSlice.js",[],"D:\\REACT\\mhco\\src\\store\\AppContext\\AppProvider.js",["287"],"import { useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport AppContext from \"./AppContext\";\r\nimport firebase from \"../../adapters/Firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUser } from \"../../redux/authSlice\";\r\nimport { FIREBASE_USERS_IDENTIFIER } from \"../../constants\";\r\nconst _ = require(\"lodash\");\r\nconst checkOnlineStatus = require(\"is-online\");\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const islg = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n  const ismd = useMediaQuery(theme.breakpoints.only(\"md\"));\r\n  const issm = useMediaQuery(theme.breakpoints.only(\"sm\"));\r\n  const isxs = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n  const [isOnline, setOnlineStatus] = useState();\r\n  const user = useSelector((state) => state.auth.user);\r\n  const dispatch = useDispatch();\r\n  const notify = (message, type) => {\r\n    enqueueSnackbar(message, { variant: type });\r\n  };\r\n\r\n  checkOnlineStatus().then((res) => {\r\n    setOnlineStatus(res);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!_.isEmpty(user)) {\r\n      firebase\r\n        .database()\r\n        .ref(FIREBASE_USERS_IDENTIFIER + \"/\" + user.uid)\r\n        .on(\"value\", (snapshot) => {\r\n          const data = snapshot.val();\r\n          dispatch(setUser(data));\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const [dialogs, setDialogs] = useState({\r\n    operators: {\r\n      add: { open: false },\r\n      edit: { open: false, uid: \"\" },\r\n    },\r\n  });\r\n\r\n  const contextValue = {\r\n    islg,\r\n    ismd,\r\n    issm,\r\n    isxs,\r\n    notify,\r\n    isOnline,\r\n    dialogs,\r\n    setDialogs,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>{children}</AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppProvider;\r\n","D:\\REACT\\mhco\\src\\store\\AppContext\\AppContext.js",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\ManageBanks\\index.jsx",["288","289","290","291"],"import {\r\n  Box,\r\n  CircularProgress,\r\n  Grid,\r\n  IconButton,\r\n  TableCell,\r\n  TableHead,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  CheckCircleOutlineRounded,\r\n  EditRounded,\r\n  NotInterestedOutlined,\r\n  RefreshOutlined,\r\n  RefreshRounded,\r\n} from \"@material-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useIt } from \"../../../Context\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nexport default function ManageBanks() {\r\n  const bankList = useSelector((state) => state.banksList.data);\r\n  const isLoading = useSelector((state) => state.banksList.loading);\r\n  const { getBanksList } = useIt();\r\n  const [oil, setOil] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setOil(\r\n      bankList.map((item, index) => [\r\n        item.BANK_NAME,\r\n        item.CODE,\r\n        item.BALANCE,\r\n        item.STATUS,\r\n        item.TYPE,\r\n      ])\r\n    );\r\n    // console.log(oil);\r\n  }, [bankList]);\r\n\r\n  useEffect(() => {\r\n    _.isEmpty(bankList) && getBanksList();\r\n    // console.log(bankList);\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <MUIDataTable\r\n        title=\"Banks Data\"\r\n        data={oil}\r\n        columns={[\r\n          {\r\n            name: \"Name\",\r\n            options: {\r\n              //   filter: false,\r\n            },\r\n          },\r\n          {\r\n            name: \"Code\",\r\n            options: {\r\n              //   filter: false,\r\n            },\r\n          },\r\n          {\r\n            name: \"Balance\",\r\n            options: {\r\n              //   filter: false,\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <span style={{ letterSpacing: \"0.1em\" }}>\r\n                    {(value + 0.5) | 0}\r\n                  </span>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Active\",\r\n            options: {\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <Box textAlign=\"center\">\r\n                    {value ? (\r\n                      <CheckCircleOutlineRounded color=\"primary\" />\r\n                    ) : (\r\n                      <NotInterestedOutlined color=\"error\" />\r\n                    )}\r\n                  </Box>\r\n                );\r\n              },\r\n              customHeadRender: (columnMeta) => {\r\n                return (\r\n                  <TableCell>\r\n                    <Box textAlign=\"center\">{columnMeta.name}</Box>\r\n                  </TableCell>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Edit\",\r\n            options: {\r\n              sort: false,\r\n              filter: false,\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <Box textAlign=\"center\">\r\n                    <IconButton onClick={() => {}}>\r\n                      <EditRounded />\r\n                    </IconButton>\r\n                  </Box>\r\n                );\r\n              },\r\n              customHeadRender: (columnMeta) => {\r\n                return (\r\n                  <TableCell>\r\n                    <Box textAlign=\"center\">{columnMeta.name}</Box>\r\n                  </TableCell>\r\n                );\r\n              },\r\n            },\r\n          },\r\n        ]}\r\n        options={{\r\n          fixedSelectColumn: true,\r\n          downloadOptions: {\r\n            filename: \"MCHO BANKS LIST.csv\",\r\n          },\r\n          selectableRowsHeader: true,\r\n          selectableRows: \"multiple\",\r\n          customToolbar: () => {\r\n            return (\r\n              <Tooltip title={!isLoading ? \"Reload\" : \"Loading\"}>\r\n                <IconButton onClick={getBanksList}>\r\n                  {!isLoading ? (\r\n                    <RefreshOutlined />\r\n                  ) : (\r\n                    <CircularProgress size=\"23px\" />\r\n                  )}\r\n                </IconButton>\r\n              </Tooltip>\r\n            );\r\n          },\r\n        }}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageCustomers\\index.jsx",["292"],"import {\r\n  Avatar,\r\n  Box,\r\n  CircularProgress,\r\n  Grid,\r\n  IconButton,\r\n  TableCell,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  CheckCircleOutlineRounded,\r\n  EditRounded,\r\n  NotInterestedOutlined,\r\n  RefreshOutlined,\r\n} from \"@material-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useIt } from \"../../../Context\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { GOOGLE_IMAGE } from \"../../../urlConstants\";\r\nimport { toggleEditCustomerDialog } from \"../../../redux/screenSlice\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nexport default function ManageBanks() {\r\n  const customerList = useSelector((state) => state.customersList.data);\r\n  const isLoading = useSelector((state) => state.customersList.loading);\r\n  const { getCustomersList } = useIt();\r\n  const [oil, setOil] = useState([]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setOil(\r\n      customerList.map((item, index) => [\r\n        item.NAME,\r\n        item.IMAGE,\r\n        item.MOBILE,\r\n        item.PAYMENT_AMOUNT,\r\n        item.INVOICE_AMOUNT,\r\n        item.STATUS,\r\n        item.ROW,\r\n      ])\r\n    );\r\n    // console.log(oil);\r\n  }, [customerList]);\r\n\r\n  useEffect(() => {\r\n    _.isEmpty(customerList) && getCustomersList();\r\n    // console.log(customerList);\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <MUIDataTable\r\n        title=\"Banks Data\"\r\n        data={oil}\r\n        columns={[\r\n          {\r\n            name: \"Name\",\r\n            options: {\r\n              //   filter: false,\r\n            },\r\n          },\r\n          {\r\n            name: \"Image\",\r\n            options: {\r\n              filter: false,\r\n              sort: false,\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <Grid justify=\"center\" container>\r\n                    <Avatar src={GOOGLE_IMAGE + value} />\r\n                  </Grid>\r\n                );\r\n              },\r\n              customHeadRender: (columnMeta) => {\r\n                return (\r\n                  <TableCell>\r\n                    <Box textAlign=\"center\">{columnMeta.name}</Box>\r\n                  </TableCell>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Mobile\",\r\n            options: {\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return <span style={{ letterSpacing: \"0.1em\" }}>{value}</span>;\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Pymt Amt\",\r\n            options: {\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <span style={{ letterSpacing: \"0.1em\" }}>\r\n                    {(value + 0.5) | 0}\r\n                  </span>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Inv Amt\",\r\n            options: {\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <span style={{ letterSpacing: \"0.1em\" }}>\r\n                    {(value + 0.5) | 0}\r\n                  </span>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Active\",\r\n            options: {\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <Box textAlign=\"center\">\r\n                    {value ? (\r\n                      <CheckCircleOutlineRounded color=\"primary\" />\r\n                    ) : (\r\n                      <NotInterestedOutlined color=\"error\" />\r\n                    )}\r\n                  </Box>\r\n                );\r\n              },\r\n              customHeadRender: (columnMeta) => {\r\n                return (\r\n                  <TableCell>\r\n                    <Box textAlign=\"center\">{columnMeta.name}</Box>\r\n                  </TableCell>\r\n                );\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: \"Edit\",\r\n            options: {\r\n              sort: false,\r\n              filter: false,\r\n              customBodyRender: (value, tableMeta, updateValue) => {\r\n                return (\r\n                  <Box textAlign=\"center\">\r\n                    <IconButton\r\n                      onClick={() => {\r\n                        dispatch(toggleEditCustomerDialog(value));\r\n                      }}\r\n                    >\r\n                      <EditRounded />\r\n                    </IconButton>\r\n                  </Box>\r\n                );\r\n              },\r\n              customHeadRender: (columnMeta) => {\r\n                return (\r\n                  <TableCell>\r\n                    <Box textAlign=\"center\">{columnMeta.name}</Box>\r\n                  </TableCell>\r\n                );\r\n              },\r\n            },\r\n          },\r\n        ]}\r\n        options={{\r\n          fixedSelectColumn: true,\r\n          downloadOptions: {\r\n            filename: \"MCHO BANKS LIST.csv\",\r\n          },\r\n          selectableRowsHeader: true,\r\n          selectableRows: \"multiple\",\r\n          customToolbar: () => {\r\n            return (\r\n              <Tooltip title={!isLoading ? \"Reload\" : \"Loading\"}>\r\n                <IconButton onClick={getCustomersList}>\r\n                  {!isLoading ? (\r\n                    <RefreshOutlined />\r\n                  ) : (\r\n                    <CircularProgress size=\"23px\" />\r\n                  )}\r\n                </IconButton>\r\n              </Tooltip>\r\n            );\r\n          },\r\n        }}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Settings\\OldManageBanks.js",["293","294","295","296","297","298","299","300"],"D:\\REACT\\mhco\\src\\adapters\\Firebase\\index.jsx",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\index.jsx",[],"D:\\REACT\\mhco\\src\\constants\\index.jsx",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Oil.jsx",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Add.jsx",["301","302","303","304","305","306"],"import React, { useContext, useRef, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport AppContext from \"../../../store/AppContext/AppContext\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MinionInput from \"../../../components/FormComponents/MinionInput\";\r\nimport MinionCheckbox from \"../../../components/FormComponents/MinionCheckbox\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Divider } from \"@material-ui/core\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { createAccount } from \"../../../adapters/Firebase\";\r\nimport firebase from \"../../../adapters/Firebase\";\r\nimport { FIREBASE_USERS_IDENTIFIER } from \"../../../constants\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport default function AddCustomer() {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const { dialogs, setDialogs, notify } = useContext(AppContext);\r\n\r\n  const handleClose = () => {\r\n    setDialogs({\r\n      ...dialogs,\r\n      operators: {\r\n        ...dialogs.operators,\r\n        add: { ...dialogs.operators.add, open: false },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={dialogs.operators.add.open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n      fullWidth\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n    >\r\n      <DialogTitle\r\n        className=\"sticky-top\"\r\n        style={{ backgroundColor: \"inherit\" }}\r\n      >\r\n        Add New Operator\r\n      </DialogTitle>\r\n      <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string().email(\"Invalid email\").required(\"Email Required\"),\r\n          password: Yup.string().required(\"Password Required\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          createAccount(values.email, values.password)\r\n            .then((res) => {\r\n              console.log(res);\r\n\r\n              const data = {\r\n                uid: res.uid,\r\n                email: res.email,\r\n                access: {\r\n                  bank: {\r\n                    form: _.indexOf(values.bank, \"form\") > -1,\r\n                    saved: _.indexOf(values.bank, \"saved\") > -1,\r\n                  },\r\n                  invoice: {\r\n                    form: _.indexOf(values.invoice, \"form\") > -1,\r\n                    saved: _.indexOf(values.invoice, \"saved\") > -1,\r\n                  },\r\n                  payment: {\r\n                    form: _.indexOf(values.payment, \"form\") > -1,\r\n                    saved: _.indexOf(values.payment, \"saved\") > -1,\r\n                  },\r\n                },\r\n              };\r\n\r\n              firebase\r\n                .database()\r\n                .ref(FIREBASE_USERS_IDENTIFIER + \"/\" + res.uid)\r\n                .update(data);\r\n              notify(\"Operator Added Successfully\", \"success\");\r\n              resetForm();\r\n              console.log(data);\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              notify(err.message, \"error\");\r\n            })\r\n            .finally(() => {\r\n              setSubmitting(false);\r\n            });\r\n        }}\r\n      >\r\n        {({ isSubmitting, handleSubmit }) => {\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <DialogContent>\r\n                <MinionInput\r\n                  name=\"email\"\r\n                  label=\"Email\"\r\n                  placeholder=\"Enter Email Address\"\r\n                  py={3}\r\n                />\r\n\r\n                <MinionInput\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  placeholder=\"Enter Strong Password\"\r\n                  py={3}\r\n                />\r\n\r\n                <h4 className=\"mb-2 text-center\">Access:</h4>\r\n                <Divider className=\"mx-5\" />\r\n                <Box py={3} component={Grid} container justify=\"space-around\">\r\n                  <Grid item>\r\n                    <p className=\"mb-2 \">Bank:</p>\r\n                    <MinionCheckbox name=\"bank\" label=\"Form\" value=\"form\" />\r\n                    <MinionCheckbox name=\"bank\" label=\"Saved\" value=\"saved\" />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <p className=\"mb-2 \">Invoice:</p>\r\n                    <MinionCheckbox name=\"invoice\" label=\"Form\" value=\"form\" />\r\n                    <MinionCheckbox\r\n                      name=\"invoice\"\r\n                      label=\"Saved\"\r\n                      value=\"saved\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <p className=\"mb-2 \">Payment:</p>\r\n                    <MinionCheckbox name=\"payment\" label=\"Form\" value=\"form\" />\r\n                    <MinionCheckbox\r\n                      name=\"payment\"\r\n                      label=\"Saved\"\r\n                      value=\"saved\"\r\n                    />\r\n                  </Grid>\r\n                </Box>\r\n              </DialogContent>\r\n              <DialogActions className=\"pb-3 px-4\">\r\n                <Box textAlign=\"right\">\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    size=\"large\"\r\n                    type=\"button\"\r\n                    onClick={handleClose}\r\n                    color=\"secondary\"\r\n                    variant=\"contained\"\r\n                    className={`bg-danger text-white`}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                  <Button\r\n                    disabled={isSubmitting}\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    className={`bg-warning text-white position-relative`}\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    &nbsp;\r\n                    {!isSubmitting ? \"ADD\" : <i className=\"bricks-white\" />}\r\n                    &nbsp;\r\n                  </Button>\r\n                </Box>\r\n              </DialogActions>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\components\\FormComponents\\MinionInput\\index.jsx",[],"D:\\REACT\\mhco\\src\\components\\FormComponents\\MinionCheckbox\\index.jsx",["307"],"import { Box } from \"@material-ui/core\";\r\nimport { FastField } from \"formik\";\r\nimport { Checkbox, CheckboxWithLabel } from \"formik-material-ui\";\r\nimport React from \"react\";\r\n\r\nexport default function MinionInput({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  py,\r\n  ...restProps\r\n}) {\r\n  return (\r\n    <Box py={py}>\r\n      <FastField\r\n        name={name}\r\n        type=\"checkbox\"\r\n        component={CheckboxWithLabel}\r\n        Label={{ label: label }}\r\n        {...restProps}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nMinionInput.defaultProps = {\r\n  name: \"\",\r\n  label: \"\",\r\n  py: \"0\",\r\n};\r\n","D:\\REACT\\mhco\\src\\screens\\Settings\\ManageOperators\\Edit.jsx",["308","309"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport AppContext from \"../../../store/AppContext/AppContext\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MinionInput from \"../../../components/FormComponents/MinionInput\";\r\nimport MinionCheckbox from \"../../../components/FormComponents/MinionCheckbox\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Divider } from \"@material-ui/core\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport firebase from \"../../../adapters/Firebase\";\r\nimport { FIREBASE_USERS_IDENTIFIER } from \"../../../constants\";\r\nconst _ = require(\"lodash\");\r\n\r\nexport default function Edit() {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const [fetching, setFetching] = useState(false);\r\n  const { dialogs, setDialogs, notify } = useContext(AppContext);\r\n  const [initialValues, setInitialValues] = useState({});\r\n\r\n  const handleClose = () => {\r\n    setDialogs({\r\n      ...dialogs,\r\n      operators: {\r\n        ...dialogs.operators,\r\n        edit: { ...dialogs.operators.edit, open: false },\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (dialogs.operators.edit.uid) {\r\n      setFetching(true);\r\n      firebase\r\n        .database()\r\n        .ref(FIREBASE_USERS_IDENTIFIER + \"/\" + dialogs.operators.edit.uid)\r\n        .once(\"value\", (snapshot) => {\r\n          const val = snapshot.val();\r\n          setInitialValues({\r\n            uid: val.uid,\r\n            email: val.email,\r\n            bank: [\r\n              val.access.bank.form && \"form\",\r\n              val.access.bank.saved && \"saved\",\r\n            ],\r\n            invoice: [\r\n              val.access.invoice.form && \"form\",\r\n              val.access.invoice.saved && \"saved\",\r\n            ],\r\n            payment: [\r\n              val.access.payment.form && \"form\",\r\n              val.access.payment.saved && \"saved\",\r\n            ],\r\n          });\r\n          setFetching(false);\r\n        });\r\n    }\r\n  }, [dialogs.operators.edit]);\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={dialogs.operators.edit.open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n      fullWidth\r\n      disableBackdropClick\r\n      disableEscapeKeyDown\r\n    >\r\n      <DialogTitle\r\n        className=\"sticky-top\"\r\n        style={{ backgroundColor: \"inherit\" }}\r\n      >\r\n        Add New Operator\r\n      </DialogTitle>\r\n      {!fetching ? (\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={(values, { setSubmitting, resetForm }) => {\r\n            const data = {\r\n              uid: values.uid,\r\n              email: values.email,\r\n              access: {\r\n                bank: {\r\n                  form: _.indexOf(values.bank, \"form\") > -1,\r\n                  saved: _.indexOf(values.bank, \"saved\") > -1,\r\n                },\r\n                invoice: {\r\n                  form: _.indexOf(values.invoice, \"form\") > -1,\r\n                  saved: _.indexOf(values.invoice, \"saved\") > -1,\r\n                },\r\n                payment: {\r\n                  form: _.indexOf(values.payment, \"form\") > -1,\r\n                  saved: _.indexOf(values.payment, \"saved\") > -1,\r\n                },\r\n              },\r\n            };\r\n\r\n            console.log(data);\r\n            firebase\r\n              .database()\r\n              .ref(FIREBASE_USERS_IDENTIFIER + \"/\" + values.uid)\r\n              .update(data);\r\n            notify(\"Operator Updated Successfully\", \"success\");\r\n            resetForm();\r\n            setSubmitting(false);\r\n            handleClose();\r\n          }}\r\n        >\r\n          {({ isSubmitting, handleSubmit }) => {\r\n            return (\r\n              <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                  <MinionInput name=\"email\" label=\"Email\" py={3} disabled />\r\n                  <MinionInput name=\"uid\" label=\"User Id\" py={3} disabled />\r\n                  <h4 className=\"mb-2 text-center\">Access:</h4>\r\n                  <Divider className=\"mx-5\" />\r\n                  <Box py={3} component={Grid} container justify=\"space-around\">\r\n                    <Grid item>\r\n                      <p className=\"mb-2 \">Bank:</p>\r\n                      <MinionCheckbox name=\"bank\" label=\"Form\" value=\"form\" />\r\n                      <MinionCheckbox name=\"bank\" label=\"Saved\" value=\"saved\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <p className=\"mb-2 \">Invoice:</p>\r\n                      <MinionCheckbox\r\n                        name=\"invoice\"\r\n                        label=\"Form\"\r\n                        value=\"form\"\r\n                      />\r\n                      <MinionCheckbox\r\n                        name=\"invoice\"\r\n                        label=\"Saved\"\r\n                        value=\"saved\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <p className=\"mb-2 \">Payment:</p>\r\n                      <MinionCheckbox\r\n                        name=\"payment\"\r\n                        label=\"Form\"\r\n                        value=\"form\"\r\n                      />\r\n                      <MinionCheckbox\r\n                        name=\"payment\"\r\n                        label=\"Saved\"\r\n                        value=\"saved\"\r\n                      />\r\n                    </Grid>\r\n                  </Box>\r\n                </DialogContent>\r\n                <DialogActions className=\"pb-3 px-4\">\r\n                  <Box textAlign=\"right\">\r\n                    <Button\r\n                      disabled={isSubmitting}\r\n                      size=\"large\"\r\n                      type=\"button\"\r\n                      onClick={handleClose}\r\n                      color=\"secondary\"\r\n                      variant=\"contained\"\r\n                      className={`bg-danger text-white`}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Button\r\n                      disabled={isSubmitting}\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      className={`bg-warning text-white position-relative`}\r\n                      onClick={handleSubmit}\r\n                    >\r\n                      &nbsp;\r\n                      {!isSubmitting ? \"Save\" : <i className=\"bricks-white\" />}\r\n                      &nbsp;\r\n                    </Button>\r\n                  </Box>\r\n                </DialogActions>\r\n              </form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      ) : (\r\n        <h1 className=\"display-1\">Loading</h1>\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n",{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":1,"column":28,"nodeType":"316","messageId":"317","endLine":1,"endColumn":37},{"ruleId":"314","severity":1,"message":"318","line":4,"column":10,"nodeType":"316","messageId":"317","endLine":4,"endColumn":21},{"ruleId":"314","severity":1,"message":"319","line":12,"column":35,"nodeType":"316","messageId":"317","endLine":12,"endColumn":46},{"ruleId":"314","severity":1,"message":"320","line":13,"column":27,"nodeType":"316","messageId":"317","endLine":13,"endColumn":32},{"ruleId":"314","severity":1,"message":"321","line":24,"column":8,"nodeType":"316","messageId":"317","endLine":24,"endColumn":19},{"ruleId":"314","severity":1,"message":"322","line":25,"column":8,"nodeType":"316","messageId":"317","endLine":25,"endColumn":20},{"ruleId":"314","severity":1,"message":"323","line":28,"column":10,"nodeType":"316","messageId":"317","endLine":28,"endColumn":18},{"ruleId":"314","severity":1,"message":"324","line":29,"column":10,"nodeType":"316","messageId":"317","endLine":29,"endColumn":17},{"ruleId":"314","severity":1,"message":"325","line":39,"column":5,"nodeType":"316","messageId":"317","endLine":39,"endColumn":6},{"ruleId":"314","severity":1,"message":"326","line":20,"column":8,"nodeType":"316","messageId":"317","endLine":20,"endColumn":39},{"ruleId":"314","severity":1,"message":"327","line":34,"column":9,"nodeType":"316","messageId":"317","endLine":34,"endColumn":16},{"ruleId":"314","severity":1,"message":"323","line":15,"column":10,"nodeType":"316","messageId":"317","endLine":15,"endColumn":18},{"ruleId":"314","severity":1,"message":"328","line":18,"column":10,"nodeType":"316","messageId":"317","endLine":18,"endColumn":19},{"ruleId":"314","severity":1,"message":"329","line":80,"column":19,"nodeType":"316","messageId":"317","endLine":80,"endColumn":28},{"ruleId":"314","severity":1,"message":"315","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"330","line":43,"column":23,"nodeType":"316","messageId":"317","endLine":43,"endColumn":35},{"ruleId":"314","severity":1,"message":"331","line":44,"column":9,"nodeType":"316","messageId":"317","endLine":44,"endColumn":13},{"ruleId":"332","severity":1,"message":"333","line":50,"column":6,"nodeType":"334","endLine":50,"endColumn":8,"suggestions":"335"},{"ruleId":"332","severity":1,"message":"333","line":48,"column":6,"nodeType":"334","endLine":48,"endColumn":8,"suggestions":"336"},{"ruleId":"314","severity":1,"message":"337","line":29,"column":3,"nodeType":"316","messageId":"317","endLine":29,"endColumn":27},{"ruleId":"314","severity":1,"message":"338","line":67,"column":9,"nodeType":"316","messageId":"317","endLine":67,"endColumn":28},{"ruleId":"314","severity":1,"message":"339","line":103,"column":9,"nodeType":"316","messageId":"317","endLine":103,"endColumn":26},{"ruleId":"314","severity":1,"message":"315","line":3,"column":27,"nodeType":"316","messageId":"317","endLine":3,"endColumn":36},{"ruleId":"332","severity":1,"message":"340","line":72,"column":6,"nodeType":"334","endLine":72,"endColumn":24,"suggestions":"341"},{"ruleId":"314","severity":1,"message":"331","line":45,"column":9,"nodeType":"316","messageId":"317","endLine":45,"endColumn":13},{"ruleId":"314","severity":1,"message":"315","line":1,"column":17,"nodeType":"316","messageId":"317","endLine":1,"endColumn":26},{"ruleId":"314","severity":1,"message":"342","line":27,"column":27,"nodeType":"316","messageId":"317","endLine":27,"endColumn":43},{"ruleId":"314","severity":1,"message":"343","line":29,"column":11,"nodeType":"316","messageId":"317","endLine":29,"endColumn":17},{"ruleId":"314","severity":1,"message":"344","line":7,"column":3,"nodeType":"316","messageId":"317","endLine":7,"endColumn":13},{"ruleId":"314","severity":1,"message":"315","line":10,"column":27,"nodeType":"316","messageId":"317","endLine":10,"endColumn":36},{"ruleId":"314","severity":1,"message":"345","line":10,"column":38,"nodeType":"316","messageId":"317","endLine":10,"endColumn":46},{"ruleId":"314","severity":1,"message":"318","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":21},{"ruleId":"314","severity":1,"message":"346","line":14,"column":10,"nodeType":"316","messageId":"317","endLine":14,"endColumn":25},{"ruleId":"314","severity":1,"message":"347","line":10,"column":8,"nodeType":"316","messageId":"317","endLine":10,"endColumn":23},{"ruleId":"314","severity":1,"message":"348","line":19,"column":8,"nodeType":"316","messageId":"317","endLine":19,"endColumn":24},{"ruleId":"314","severity":1,"message":"349","line":20,"column":8,"nodeType":"316","messageId":"317","endLine":20,"endColumn":14},{"ruleId":"314","severity":1,"message":"350","line":37,"column":10,"nodeType":"316","messageId":"317","endLine":37,"endColumn":15},{"ruleId":"314","severity":1,"message":"351","line":39,"column":10,"nodeType":"316","messageId":"317","endLine":39,"endColumn":15},{"ruleId":"314","severity":1,"message":"352","line":39,"column":17,"nodeType":"316","messageId":"317","endLine":39,"endColumn":25},{"ruleId":"314","severity":1,"message":"353","line":3,"column":8,"nodeType":"316","messageId":"317","endLine":3,"endColumn":14},{"ruleId":"314","severity":1,"message":"354","line":8,"column":8,"nodeType":"316","messageId":"317","endLine":8,"endColumn":17},{"ruleId":"314","severity":1,"message":"355","line":9,"column":8,"nodeType":"316","messageId":"317","endLine":9,"endColumn":18},{"ruleId":"314","severity":1,"message":"356","line":10,"column":8,"nodeType":"316","messageId":"317","endLine":10,"endColumn":16},{"ruleId":"310","replacedBy":"357"},{"ruleId":"312","replacedBy":"358"},{"ruleId":"332","severity":1,"message":"359","line":40,"column":6,"nodeType":"334","endLine":40,"endColumn":8,"suggestions":"360"},{"ruleId":"314","severity":1,"message":"361","line":4,"column":3,"nodeType":"316","messageId":"317","endLine":4,"endColumn":7},{"ruleId":"314","severity":1,"message":"362","line":7,"column":3,"nodeType":"316","messageId":"317","endLine":7,"endColumn":12},{"ruleId":"314","severity":1,"message":"363","line":15,"column":3,"nodeType":"316","messageId":"317","endLine":15,"endColumn":17},{"ruleId":"332","severity":1,"message":"364","line":46,"column":6,"nodeType":"334","endLine":46,"endColumn":8,"suggestions":"365"},{"ruleId":"332","severity":1,"message":"366","line":50,"column":6,"nodeType":"334","endLine":50,"endColumn":8,"suggestions":"367"},{"ruleId":"314","severity":1,"message":"368","line":24,"column":3,"nodeType":"316","messageId":"317","endLine":24,"endColumn":9},{"ruleId":"314","severity":1,"message":"369","line":29,"column":10,"nodeType":"316","messageId":"317","endLine":29,"endColumn":22},{"ruleId":"314","severity":1,"message":"331","line":52,"column":9,"nodeType":"316","messageId":"317","endLine":52,"endColumn":13},{"ruleId":"314","severity":1,"message":"370","line":53,"column":9,"nodeType":"316","messageId":"317","endLine":53,"endColumn":16},{"ruleId":"332","severity":1,"message":"371","line":73,"column":6,"nodeType":"334","endLine":73,"endColumn":17,"suggestions":"372"},{"ruleId":"373","severity":1,"message":"374","line":86,"column":11,"nodeType":"316","messageId":"375","endLine":86,"endColumn":14},{"ruleId":"332","severity":1,"message":"371","line":91,"column":6,"nodeType":"334","endLine":91,"endColumn":14,"suggestions":"376"},{"ruleId":"314","severity":1,"message":"377","line":243,"column":7,"nodeType":"316","messageId":"317","endLine":243,"endColumn":12},{"ruleId":"314","severity":1,"message":"378","line":1,"column":29,"nodeType":"316","messageId":"317","endLine":1,"endColumn":35},{"ruleId":"314","severity":1,"message":"345","line":1,"column":37,"nodeType":"316","messageId":"317","endLine":1,"endColumn":45},{"ruleId":"314","severity":1,"message":"318","line":9,"column":10,"nodeType":"316","messageId":"317","endLine":9,"endColumn":21},{"ruleId":"314","severity":1,"message":"379","line":9,"column":23,"nodeType":"316","messageId":"317","endLine":9,"endColumn":34},{"ruleId":"314","severity":1,"message":"380","line":10,"column":10,"nodeType":"316","messageId":"317","endLine":10,"endColumn":19},{"ruleId":"314","severity":1,"message":"381","line":11,"column":10,"nodeType":"316","messageId":"317","endLine":11,"endColumn":15},{"ruleId":"314","severity":1,"message":"382","line":3,"column":10,"nodeType":"316","messageId":"317","endLine":3,"endColumn":18},{"ruleId":"314","severity":1,"message":"378","line":1,"column":40,"nodeType":"316","messageId":"317","endLine":1,"endColumn":46},{"ruleId":"314","severity":1,"message":"383","line":11,"column":13,"nodeType":"316","messageId":"317","endLine":11,"endColumn":16},"no-native-reassign",["384"],"no-negated-in-lhs",["385"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'useLocation' is defined but never used.","'useIt' is defined but never used.","'PaymentForm' is defined but never used.","'PaymentSaved' is defined but never used.","'BASE_URL' is defined but never used.","'setUser' is defined but never used.","'_' is assigned a value but never used.","'AccountBalanceWalletRoundedIcon' is defined but never used.","'classes' is assigned a value but never used.","'setAccess' is defined but never used.","'getAccess' is assigned a value but never used.","'getBanksList' is assigned a value but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'access' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["386"],["387"],"'selectAllPaymentRequests' is defined but never used.","'savedPaymentLoading' is assigned a value but never used.","'uploadPaymentData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["388"],"'setSelectedValue' is assigned a value but never used.","'submit' is assigned a value but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'setCustomerData' is defined but never used.","'TablePagination' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'error' is assigned a value but never used.","'Image' is assigned a value but never used.","'setImage' is assigned a value but never used.","'Button' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.",["384"],["385"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["389"],"'Grid' is defined but never used.","'TableHead' is defined but never used.","'RefreshRounded' is defined but never used.","React Hook useEffect has missing dependencies: 'bankList' and 'getBanksList'. Either include them or remove the dependency array.",["390"],"React Hook useEffect has missing dependencies: 'customerList' and 'getCustomersList'. Either include them or remove the dependency array.",["391"],"'Avatar' is defined but never used.","'GOOGLE_IMAGE' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'bnks'. Either include it or remove the dependency array.",["392"],"no-redeclare","'res' is already defined.","redeclared",["393"],"'banks' is assigned a value but never used.","'useRef' is defined but never used.","'useSelector' is defined but never used.","'TextField' is defined but never used.","'Alert' is defined but never used.","'Checkbox' is defined but never used.","'Yup' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"394","fix":"395"},{"desc":"394","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},"Update the dependencies array to be: [access, history]",{"range":"409","text":"410"},{"range":"411","text":"410"},"Update the dependencies array to be: [dispatch, history, iaccess, paccess]",{"range":"412","text":"413"},"Update the dependencies array to be: [dispatch, user]",{"range":"414","text":"415"},"Update the dependencies array to be: [bankList, getBanksList]",{"range":"416","text":"417"},"Update the dependencies array to be: [customerList, getCustomersList]",{"range":"418","text":"419"},"Update the dependencies array to be: [bnks, searchVal]",{"range":"420","text":"421"},"Update the dependencies array to be: [bnks, filter]",{"range":"422","text":"423"},[2145,2147],"[access, history]",[1409,1411],[2615,2633],"[dispatch, history, iaccess, paccess]",[1453,1455],"[dispatch, user]",[1105,1107],"[bankList, getBanksList]",[1348,1350],"[customerList, getCustomersList]",[2983,2994],"[bnks, searchVal]",[3398,3406],"[bnks, filter]"]