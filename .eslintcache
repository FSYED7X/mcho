[{"D:\\REACT\\mhco\\src\\index.js":"1","D:\\REACT\\mhco\\src\\App.js":"2","D:\\REACT\\mhco\\src\\reportWebVitals.js":"3","D:\\REACT\\mhco\\src\\serviceWorkerRegistration.js":"4","D:\\REACT\\mhco\\src\\components\\SideNav\\SideNav.js":"5","D:\\REACT\\mhco\\src\\redux\\screenSlice.js":"6","D:\\REACT\\mhco\\src\\store.js":"7","D:\\REACT\\mhco\\src\\components\\BottomNav\\BottomNav.js":"8","D:\\REACT\\mhco\\src\\screens\\Settings\\Settings.js":"9","D:\\REACT\\mhco\\src\\redux\\authSlice.js":"10","D:\\REACT\\mhco\\src\\components\\Login\\Login.js":"11","D:\\REACT\\mhco\\src\\components\\Calendar\\Calendar.js":"12","D:\\REACT\\mhco\\src\\components\\CurrencyList\\CurrencyList.js":"13","D:\\REACT\\mhco\\src\\components\\Snackbar\\SnackBar.js":"14","D:\\REACT\\mhco\\src\\components\\ToggleButtons\\ToggleButtons.js":"15","D:\\REACT\\mhco\\src\\screens\\Bank\\BankForm.js":"16","D:\\REACT\\mhco\\src\\screens\\Bank\\SavedData.js":"17","D:\\REACT\\mhco\\src\\components\\Navbar\\Navbar.js":"18","D:\\REACT\\mhco\\src\\urlConstants.js":"19","D:\\REACT\\mhco\\src\\Context.js":"20","D:\\REACT\\mhco\\src\\components\\AddBankDialog\\AddBank.js":"21","D:\\REACT\\mhco\\src\\components\\BanksList\\BanksList.js":"22","D:\\REACT\\mhco\\src\\redux\\banksListSlice.js":"23","D:\\REACT\\mhco\\src\\screens\\Invoice\\Form.js":"24","D:\\REACT\\mhco\\src\\screens\\Invoice\\Saved.js":"25","D:\\REACT\\mhco\\src\\redux\\bank\\bankFormSlice.js":"26","D:\\REACT\\mhco\\src\\redux\\bank\\bankSavedDataSlice.js":"27","D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceFormSlice.js":"28","D:\\REACT\\mhco\\src\\redux\\payment\\paymentSavedDataSlice.js":"29","D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceSavedDataSlice.js":"30","D:\\REACT\\mhco\\src\\redux\\payment\\paymentFormSlice.js":"31","D:\\REACT\\mhco\\src\\screens\\Payment\\Form.js":"32","D:\\REACT\\mhco\\src\\screens\\Payment\\Saved.js":"33","D:\\REACT\\mhco\\src\\components\\AddCustomerDialog\\AddCustomer.js":"34","D:\\REACT\\mhco\\src\\components\\CustomersList\\CustomersList.js":"35","D:\\REACT\\mhco\\src\\redux\\customersListSlice.js":"36","D:\\REACT\\mhco\\src\\components\\NoAccess\\NoAccess.js":"37"},{"size":1253,"mtime":1614844595669,"results":"38","hashOfConfig":"39"},{"size":4755,"mtime":1614971389942,"results":"40","hashOfConfig":"39"},{"size":364,"mtime":1614824722031,"results":"41","hashOfConfig":"39"},{"size":5064,"mtime":499162500000,"results":"42","hashOfConfig":"39"},{"size":7651,"mtime":1614881432733,"results":"43","hashOfConfig":"39"},{"size":1725,"mtime":1615009697623,"results":"44","hashOfConfig":"39"},{"size":1273,"mtime":1614139432945,"results":"45","hashOfConfig":"39"},{"size":2091,"mtime":1614626398570,"results":"46","hashOfConfig":"39"},{"size":2991,"mtime":1610449936255,"results":"47","hashOfConfig":"39"},{"size":632,"mtime":1614852013951,"results":"48","hashOfConfig":"39"},{"size":5516,"mtime":1615012079630,"results":"49","hashOfConfig":"39"},{"size":1173,"mtime":1614165924515,"results":"50","hashOfConfig":"39"},{"size":7586,"mtime":1615009713819,"results":"51","hashOfConfig":"39"},{"size":972,"mtime":1610391107489,"results":"52","hashOfConfig":"39"},{"size":2110,"mtime":1614548664634,"results":"53","hashOfConfig":"39"},{"size":10784,"mtime":1615012404388,"results":"54","hashOfConfig":"39"},{"size":4999,"mtime":1614854199765,"results":"55","hashOfConfig":"39"},{"size":11523,"mtime":1615893153520,"results":"56","hashOfConfig":"39"},{"size":344,"mtime":1615893658562,"results":"57","hashOfConfig":"39"},{"size":4201,"mtime":1615833869697,"results":"58","hashOfConfig":"39"},{"size":5088,"mtime":1614712881850,"results":"59","hashOfConfig":"39"},{"size":3212,"mtime":1613253787696,"results":"60","hashOfConfig":"39"},{"size":562,"mtime":1614139388708,"results":"61","hashOfConfig":"39"},{"size":19190,"mtime":1615898674973,"results":"62","hashOfConfig":"39"},{"size":6671,"mtime":1614854623664,"results":"63","hashOfConfig":"39"},{"size":2087,"mtime":1613253769783,"results":"64","hashOfConfig":"39"},{"size":2136,"mtime":1613256842070,"results":"65","hashOfConfig":"39"},{"size":3982,"mtime":1615834182495,"results":"66","hashOfConfig":"39"},{"size":2199,"mtime":1613256875086,"results":"67","hashOfConfig":"39"},{"size":2199,"mtime":1613256870476,"results":"68","hashOfConfig":"39"},{"size":2129,"mtime":1613253886503,"results":"69","hashOfConfig":"39"},{"size":17114,"mtime":1614712020929,"results":"70","hashOfConfig":"39"},{"size":153,"mtime":1613254172513,"results":"71","hashOfConfig":"39"},{"size":5237,"mtime":1615009713819,"results":"72","hashOfConfig":"39"},{"size":3919,"mtime":1614545037237,"results":"73","hashOfConfig":"39"},{"size":606,"mtime":1614139295636,"results":"74","hashOfConfig":"39"},{"size":14320,"mtime":1614850247422,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"15a6qpa",{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"79"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"D:\\REACT\\mhco\\src\\index.js",["160"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Login from \"./components/Login/Login\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <App />\n        </MuiPickersUtilsProvider>\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["161","162"],"D:\\REACT\\mhco\\src\\App.js",["163","164","165","166"],"import React, { useEffect } from \"react\";\nimport SideNav from \"./components/SideNav/SideNav\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BottomNav from \"./components/BottomNav/BottomNav\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Settings from \"./screens/Settings/Settings\";\nimport SnackBar from \"./components/Snackbar/SnackBar\";\nimport \"./bootstrap.css\";\nimport \"./App.scss\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\nimport ContextProvider, { useIt } from \"./Context\";\n\nimport AddBank from \"./components/AddBankDialog/AddBank\";\nimport AddCustomer from \"./components/AddCustomerDialog/AddCustomer\";\n\nimport BankForm from \"./screens/Bank/BankForm\";\nimport BankSaved from \"./screens/Bank/SavedData\";\n\nimport InvoiceForm from \"./screens/Invoice/Form\";\nimport InvoiceSaved from \"./screens/Invoice/Saved\";\n\nimport PaymentForm from \"./screens/Payment/Form\";\nimport PaymentSaved from \"./screens/Payment/Saved\";\nimport Login from \"./components/Login/Login\";\nimport NoAccess from \"./components/NoAccess/NoAccess\";\nimport { BASE_URL } from \"./urlConstants\";\nimport { setUser } from \"./redux/authSlice\";\n\nexport const light = {\n  palette: {\n    type: \"light\",\n    primary: {\n      light: \"#3f50b5\",\n      main: \"#3f50b5\",\n      dark: \"#757ce8\",\n      contrastText: \"#fff\",\n    },\n    gradient:\n      \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\n  },\n};\n\nexport const dark = {\n  palette: {\n    type: \"dark\",\n    primary: {\n      light: \"#9fa8da\",\n      main: \"#aab6fe\",\n      dark: \"#002884\",\n      contrastText: \"#fff\",\n    },\n    error: {\n      light: \"#f44336\",\n      main: \"#e57373\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\",\n    },\n    gradient:\n      \"linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)\",\n  },\n};\n\nfunction App() {\n  const theme = useSelector((state) => state.screen.theme);\n  const location = useLocation();\n  const user = useSelector((state) => state.auth.user);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (user) {\n      document.getElementById(\"container\").scrollTo(0, 0);\n      var myHeaders = new Headers();\n      var raw = JSON.stringify({ email: user.email });\n      var requestOptions = {\n        method: \"POST\",\n        headers: myHeaders,\n        body: raw,\n        redirect: \"follow\",\n      };\n      fetch(BASE_URL + \"?action=auth2\", requestOptions)\n        .then((response) => response.json())\n        .then((result) => {\n          if (result.result) {\n            localStorage.user = JSON.stringify(result.result);\n            dispatch(setUser(result.result));\n          } else {\n            localStorage.clear();\n            window.location.reload();\n          }\n        })\n        .catch((error) => {\n          console.log(\"error\", error);\n        });\n    }\n  }, [location]);\n\n  const PrivateRoute = ({ component: Component, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={(props) =>\n          user ? (\n            <Component {...props} />\n          ) : (\n            <Redirect\n              to={{ pathname: \"/login\", state: { prevPath: rest.path } }}\n            />\n          )\n        }\n      />\n    );\n  };\n\n  const Routes = () => {\n    return (\n      <Switch>\n        <PrivateRoute path=\"/bank/form\" component={BankForm} tag=\"bank\" />\n        <PrivateRoute path=\"/bank/saved\" component={BankSaved} tag=\"bank\" />\n\n        <PrivateRoute\n          path=\"/invoice/form\"\n          component={InvoiceForm}\n          tag=\"invoice\"\n        />\n        <PrivateRoute\n          path=\"/invoice/saved\"\n          component={InvoiceSaved}\n          tag=\"invoice\"\n        />\n\n        {/* <PrivateRoute path=\"/payment/form\" component={PaymentForm} /> */}\n        {/* <PrivateRoute path=\"/payment/saved\" component={PaymentSaved} /> */}\n\n        <PrivateRoute path=\"/settings\" component={Settings} tag=\"settings\" />\n        <Route path=\"/noaccess\" component={NoAccess} />\n        <PrivateRoute path=\"/\" exact>\n          <Redirect to=\"/bank/form\" />\n        </PrivateRoute>\n      </Switch>\n    );\n  };\n\n  return (\n    <ThemeProvider theme={createMuiTheme(theme ? light : dark)}>\n      <CssBaseline />\n\n      <ContextProvider>\n        <Route path=\"/login\" component={Login} />\n\n        <BrowserView>\n          <SideNav>\n            <Routes />\n          </SideNav>\n        </BrowserView>\n\n        <MobileView>\n          <BottomNav>\n            <Routes />\n          </BottomNav>\n        </MobileView>\n\n        <AddBank />\n        <AddCustomer />\n        <SnackBar />\n      </ContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","D:\\REACT\\mhco\\src\\reportWebVitals.js",[],"D:\\REACT\\mhco\\src\\serviceWorkerRegistration.js",[],"D:\\REACT\\mhco\\src\\components\\SideNav\\SideNav.js",["167"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  CssBaseline,\r\n  Drawer,\r\n  Divider,\r\n  Container,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { openNav, closeNav } from \"../../redux/screenSlice\";\r\n\r\nimport ArrowBackIosRoundedIcon from \"@material-ui/icons/ArrowBackIosRounded\";\r\nimport AccountBalanceRoundedIcon from \"@material-ui/icons/AccountBalanceRounded\";\r\nimport ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\";\r\nimport AccountBalanceWalletRoundedIcon from \"@material-ui/icons/AccountBalanceWalletRounded\";\r\nimport SettingsRoundedIcon from \"@material-ui/icons/SettingsRounded\";\r\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\r\n\r\nimport \"./SideNav.scss\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { useIt } from \"../../Context\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\nconst drawerWidth = 230;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  ListItem: {\r\n    paddingLeft: \"21px\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 21, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    padding: \"0 8px 0 22px\",\r\n    ...theme.mixins.toolbar,\r\n    \"& svg\": {\r\n      height: \"18px\",\r\n      width: \"18px\",\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    \"& .Mui-selected\": {\r\n      background: \"none!important\",\r\n      color: theme.palette.primary.light,\r\n      borderLeft: `3px solid`,\r\n      borderRight: `3px solid`,\r\n      \"& .MuiListItemIcon-root\": {\r\n        color: theme.palette.primary.light,\r\n      },\r\n    },\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(4),\r\n    position: \"relative\",\r\n    // paddingLeft: '0!important',\r\n    height: \"100vh\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  logo: {\r\n    height: \"50px\",\r\n    width: \"100%\",\r\n    objectFit: \"contain\",\r\n  },\r\n}));\r\n\r\nexport default function SideNav({ children }) {\r\n  const sideNavOpen = useSelector((state) => state.screen.sideNavOpen);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const { logout } = useIt();\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  const user = useSelector((state) => state.auth.user);\r\n  return (\r\n    <div className={`${classes.root} sidenav`}>\r\n      <CssBaseline />\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(\r\n            classes.drawerPaper,\r\n            !sideNavOpen && classes.drawerPaperClose\r\n          ),\r\n        }}\r\n        open={sideNavOpen}\r\n      >\r\n        <div>\r\n          {sideNavOpen ? (\r\n            <div className={classes.toolbarIcon}>\r\n              <h3 className=\"m-0\">Mhco</h3>\r\n              <IconButton onClick={() => dispatch(closeNav())}>\r\n                <ArrowBackIosRoundedIcon />\r\n              </IconButton>\r\n            </div>\r\n          ) : (\r\n            <div className={classes.toolbarIcon}>\r\n              <h3 className=\"text-left m-0\">M</h3>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Divider />\r\n        <Divider />\r\n        <br />\r\n        {user && user.access.bank && (\r\n          <ListItem\r\n            component={Link}\r\n            to=\"/bank/form\"\r\n            selected={location.pathname.includes(\"/bank\")}\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n          >\r\n            <ListItemIcon>\r\n              <AccountBalanceRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Bank\" />\r\n          </ListItem>\r\n        )}\r\n\r\n        {user && (user.access.invoice || user.access.payment) && (\r\n          <ListItem\r\n            component={Link}\r\n            to=\"/invoice/form\"\r\n            selected={location.pathname.includes(\"/invoice\")}\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n          >\r\n            <ListItemIcon>\r\n              <ReceiptRoundedIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"INV & PYMNT\" />\r\n          </ListItem>\r\n        )}\r\n\r\n        {/* <ListItem\r\n          component={Link}\r\n          to=\"/payment/form\"\r\n          selected={location.pathname.includes(\"/payment\")}\r\n          button\r\n          className={`${classes.ListItem} mb-2`}\r\n        >\r\n          <ListItemIcon>\r\n            <AccountBalanceWalletRoundedIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Payments\" />\r\n        </ListItem> */}\r\n\r\n        <Divider />\r\n        <Divider />\r\n        <br />\r\n        <aside style={{ marginTop: \"auto\" }}>\r\n          {!sideNavOpen && (\r\n            <ListItem\r\n              button\r\n              className={`${classes.ListItem} mb-2`}\r\n              onClick={() => dispatch(openNav())}\r\n            >\r\n              <ListItemIcon>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fill=\"currentColor\"\r\n                  width=\"20\"\r\n                  height=\"24\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path d=\"M4 22h-4v-4h4v4zm0-12h-4v4h4v-4zm0-8h-4v4h4v-4zm3 0v4h17v-4h-17zm0 12h17v-4h-17v4zm0 8h17v-4h-17v4z\" />\r\n                </svg>\r\n              </ListItemIcon>\r\n            </ListItem>\r\n          )}\r\n\r\n          {user && user.access.settings && (\r\n            <ListItem\r\n              component={Link}\r\n              to=\"/settings\"\r\n              selected={location.pathname.includes(\"/settings\")}\r\n              button\r\n              className={`${classes.ListItem} mb-2`}\r\n            >\r\n              <ListItemIcon>\r\n                <SettingsRoundedIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Settings\" />\r\n            </ListItem>\r\n          )}\r\n\r\n          <ListItem\r\n            button\r\n            className={`${classes.ListItem} mb-2`}\r\n            onClick={logout}\r\n          >\r\n            <ListItemIcon>\r\n              <ExitToAppRoundedIcon htmlColor={theme ? \"crimson\" : \"yellow\"} />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary={\r\n                <span style={{ color: theme ? \"crimson\" : \"yellow\" }}>\r\n                  Logout\r\n                </span>\r\n              }\r\n            />\r\n          </ListItem>\r\n        </aside>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <Container\r\n          maxWidth=\"lg\"\r\n          className={`${classes.container}`}\r\n          id=\"container\"\r\n        >\r\n          <Navbar />\r\n          {children}\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\redux\\screenSlice.js",[],"D:\\REACT\\mhco\\src\\store.js",[],"D:\\REACT\\mhco\\src\\components\\BottomNav\\BottomNav.js",[],"D:\\REACT\\mhco\\src\\screens\\Settings\\Settings.js",[],"D:\\REACT\\mhco\\src\\redux\\authSlice.js",[],"D:\\REACT\\mhco\\src\\components\\Login\\Login.js",["168"],"import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  CssBaseline,\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport { BASE_URL } from \"../../urlConstants\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAccess, setUser } from \"../../redux/authSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    position: \"relative\",\r\n    overflow: \"hidden\",\r\n    padding: isMobile ? \"15% 2%\" : \"7%\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    \"& *\": {\r\n      fontWeight: \"600!important\",\r\n    },\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = useState({\r\n    error: false,\r\n    loading: false,\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const handleSubmit = (e) => {\r\n    setState({ ...state, loading: true });\r\n    e.preventDefault();\r\n    var myHeaders = new Headers();\r\n    var raw = JSON.stringify({ email: state.email, password: state.password });\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    fetch(BASE_URL + \"?action=auth\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (result.result) {\r\n          localStorage.user = JSON.stringify(result.result);\r\n          setState({ ...state, loading: false });\r\n          dispatch(setUser(result.result));\r\n          props.location.state\r\n            ? history.push(props.location.state.prevPath)\r\n            : result.result.access.bank\r\n            ? history.push(\"/bank/form\")\r\n            : result.result.access.invoice || result.result.access.payment\r\n            ? history.push(\"/bank/form\")\r\n            : history.push(\"/noaccess\");\r\n        } else {\r\n          setState({ ...state, loading: false, error: true });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setState({ ...state, loading: false });\r\n        console.log(\"error\", error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section\r\n      component=\"main\"\r\n      className={`col-sm-12 col-md-6 col-lg-5 mx-auto ${classes.root}`}\r\n    >\r\n      <CssBaseline />\r\n      <Paper elevation={isMobile ? 0 : 2} className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" className=\"display-1\">\r\n          Sign in\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={(e) =>\r\n            !state.loading ? handleSubmit(e) : e.preventDefault()\r\n          }\r\n        >\r\n          {state.error && (\r\n            <div class=\"alert alert-danger mt-4\" role=\"alert\">\r\n              Invalid Credentials!\r\n            </div>\r\n          )}\r\n\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            className=\"mt-4\"\r\n            autoFocus\r\n            onChange={(e) => setState({ ...state, email: e.target.value })}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            className=\"mt-4\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={(e) => setState({ ...state, password: e.target.value })}\r\n          />\r\n          <Grid item xs className=\"text-center mt-4 pt-4\">\r\n            <Link href=\"#\" variant=\"body2\">\r\n              Forgot password?\r\n            </Link>\r\n          </Grid>\r\n          <div className=\"col-6 mx-auto\">\r\n            <Button\r\n              disabled={state.loading}\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              className={`${classes.submit} fs-6 bg-primary text-white`}\r\n            >\r\n              {state.loading ? (\r\n                <Fragment>\r\n                  Verifying&nbsp;&nbsp;&nbsp;&nbsp;\r\n                  <i className=\"bricks-white\" />\r\n                </Fragment>\r\n              ) : (\r\n                <Fragment>Sign In</Fragment>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n      <Box className=\"\" mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </section>\r\n  );\r\n}\r\n","D:\\REACT\\mhco\\src\\components\\Calendar\\Calendar.js",[],"D:\\REACT\\mhco\\src\\components\\CurrencyList\\CurrencyList.js",[],"D:\\REACT\\mhco\\src\\components\\Snackbar\\SnackBar.js",[],"D:\\REACT\\mhco\\src\\components\\ToggleButtons\\ToggleButtons.js",["169"],"import React, { useEffect } from 'react';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setBankData } from '../../redux/bank/bankFormSlice';\r\n\r\nexport default function ToggleButtons({ value, setValue, amount }) {\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            width: '100%',\r\n            '& button': {\r\n                borderColor: '#B6B6B6',\r\n                width: '100%',\r\n                '&:hover': {\r\n                }\r\n            },\r\n            '& .Mui-selected': {\r\n                background: value === 'credit' ? theme.palette.success.dark : 'linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)',\r\n                color: '#fff',\r\n                '&:hover': {\r\n                    background: value === 'credit' ? theme.palette.success.dark : 'linear-gradient(to right, #D31027 0%, #EA384D  51%, #D31027  100%)',\r\n                }\r\n            }\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const handleValue = (event, newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n            if (newValue === 'credit') {\r\n                dispatch(setBankData({ key: 'credit', value: amount.current.value }))\r\n                dispatch(setBankData({ key: 'debit', value: '' }))\r\n            } else {\r\n                dispatch(setBankData({ key: 'debit', value: amount.current.value }))\r\n                dispatch(setBankData({ key: 'credit', value: '' }))\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ToggleButtonGroup\r\n            value={value}\r\n            exclusive\r\n            onChange={handleValue}\r\n            className={classes.root}\r\n        >\r\n            <ToggleButton value=\"credit\">\r\n                CREDIT\r\n            </ToggleButton>\r\n            <ToggleButton value=\"debit\">\r\n                DEBIT\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    );\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Bank\\BankForm.js",["170"],"import Calendar from \"../../components/Calendar/Calendar\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport CurrencyList from \"../../components/CurrencyList/CurrencyList\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setBankData, resetBankForm } from \"../../redux/bank/bankFormSlice\";\r\nimport CloudUploadOutlinedIcon from \"@material-ui/icons/CloudUploadOutlined\";\r\nimport RotateLeftOutlinedIcon from \"@material-ui/icons/RotateLeftOutlined\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { openSnackbar, toggleLoading } from \"../../redux/screenSlice\";\r\nimport { Offline, Online } from \"react-detect-offline\";\r\nimport ToggleButtons from \"../../components/ToggleButtons/ToggleButtons\";\r\nimport WifiOffRoundedIcon from \"@material-ui/icons/WifiOffRounded\";\r\nimport { setbankSavedData } from \"../../redux/bank/bankSavedDataSlice\";\r\nimport { useIt } from \"../../Context\";\r\nimport BanksList from \"../../components/BanksList/BanksList\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { BASE_URL } from \"../../urlConstants\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst transactionType = [\"Cash\", \"Cheque\", \"ATM Online\", \"Pay Order\", \"Other\"];\r\n\r\nfunction BankForm() {\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const dispatch = useDispatch();\r\n  const bankForm = useSelector((state) => state.bankForm);\r\n  const amount = useRef();\r\n  const form = useRef();\r\n  const [selectedValue, setSelectedValue] = useState(\r\n    bankForm.debit ? \"debit\" : \"credit\"\r\n  );\r\n  const loading = useSelector((state) => state.screen.loading);\r\n  const { uploadData, getBanksList } = useIt();\r\n  const user = useSelector((state) => state.auth.user);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.banksList) getBanksList();\r\n    !user.access.bank && history.push(\"/noaccess\");\r\n  }, []);\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    form.current.checkValidity()\r\n      ? uploadData(\r\n          [bankForm],\r\n          toggleLoading,\r\n          BASE_URL + \"?action=upload\",\r\n          setBankData\r\n        )\r\n      : form.current.reportValidity();\r\n  };\r\n\r\n  const save = (e) => {\r\n    if (form.current.checkValidity()) {\r\n      setData(\"code\", nanoid());\r\n      dispatch(setbankSavedData(bankForm));\r\n      dispatch(\r\n        openSnackbar({ type: \"success\", mesg: \"Data Saved Successfully\" })\r\n      );\r\n    } else form.current.reportValidity();\r\n  };\r\n\r\n  const setData = (key, value) => {\r\n    dispatch(setBankData({ key: key, value: value }));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form\r\n        ref={form}\r\n        className=\"row mt-3 justify-content-between\"\r\n        onSubmit={(e) => e.preventDefault()}\r\n      >\r\n        <div className=\"col-lg-6 col-12\">\r\n          <BanksList />\r\n        </div>\r\n\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <div className=\"mb-4 pb-2\">\r\n            <CurrencyList\r\n              currency={bankForm.currency}\r\n              setCurrency={(e) => setData(\"currency\", e)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <TextField\r\n            required={bankForm.type === \"Other\" ? false : true}\r\n            value={bankForm.payeeBank || \"\"}\r\n            onChange={(e) => setData(\"payeeBank\", e.target.value)}\r\n            variant=\"outlined\"\r\n            label=\"Payee's Bank\"\r\n            className=\"w-100 mb-4 pb-2\"\r\n            inputProps={{ className: \"text-capitalize\" }}\r\n          />\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <TextField\r\n            required\r\n            value={bankForm.payee || \"\"}\r\n            onChange={(e) => setData(\"payee\", e.target.value)}\r\n            variant=\"outlined\"\r\n            label=\"Payee Name\"\r\n            className=\"w-100  mb-4 pb-2\"\r\n            inputProps={{ className: \"text-capitalize\" }}\r\n          />\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12 align-self-center\">\r\n          <div className=\"mb-4 pb-2\">\r\n            <Calendar\r\n              date={bankForm.date}\r\n              handler={(e) => setData(\"date\", e.toString())}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                required={bankForm.type === \"Other\" ? false : true}\r\n                value={bankForm.cheque || \"\"}\r\n                type=\"number\"\r\n                onChange={(e) => setData(\"cheque\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Cheque/Other no:\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={bankForm.type}\r\n                variant=\"outlined\"\r\n                select\r\n                label=\"Select Type\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                onChange={(e) => setData(\"type\", e.target.value)}\r\n              >\r\n                {transactionType.map((item) => (\r\n                  <MenuItem key={item} value={item}>\r\n                    {\" \"}\r\n                    {item}{\" \"}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </div>\r\n          </section>\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <TextField\r\n                value={bankForm[selectedValue]}\r\n                inputRef={amount}\r\n                variant=\"outlined\"\r\n                label=\"Amount:\"\r\n                fullwidth=\"true\"\r\n                className=\"w-100 mb-4 pb-2\"\r\n                inputProps={{ min: \"0.01\", step: \"0.01\" }}\r\n                type=\"number\"\r\n                required\r\n                onChange={(e) => setData(selectedValue, e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      {bankForm.currency.substring(0, 3)}\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <div className=\" mb-4 pb-2\">\r\n                <ToggleButtons\r\n                  value={selectedValue}\r\n                  setValue={(e) => setSelectedValue(e)}\r\n                  amount={amount}\r\n                />\r\n              </div>\r\n            </div>\r\n          </section>\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-12\">\r\n              <TextField\r\n                value={bankForm.note1 || \"\"}\r\n                onChange={(e) => setData(\"note1\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Note 1:\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col-md-12\">\r\n              <TextField\r\n                value={bankForm.note2 || \"\"}\r\n                onChange={(e) => setData(\"note2\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Note 2:\"\r\n                className=\"mb-4 pb-2 w-100\"\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n        <div className=\"col-12\">\r\n          <section className=\"row align-items-center\">\r\n            <div className=\"col-md-8 col-sm-12\">\r\n              <TextField\r\n                required={bankForm.type === \"Other\" ? false : true}\r\n                value={bankForm.memo || \"\"}\r\n                onChange={(e) => setData(\"memo\", e.target.value)}\r\n                variant=\"outlined\"\r\n                multiline\r\n                label=\"Memo\"\r\n                className=\"w-100 mb-4\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 col-sm-12\">\r\n              <TextField\r\n                required\r\n                value={bankForm.code || \"\"}\r\n                onChange={(e) => setData(\"code\", e.target.value)}\r\n                variant=\"outlined\"\r\n                label=\"Code\"\r\n                className=\"w-100 mb-4\"\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => copy(bankForm.code)}>\r\n                        <FileCopyOutlinedIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n        <div\r\n          className=\"text-center mt-0 mt-lg-4 col-lg-6 col-md-10 col-sm-12 mx-auto p-1\"\r\n          style={{ display: \"flex\", justifyContent: \"space-around\" }}\r\n        >\r\n          <Button\r\n            size=\"large\"\r\n            type=\"button\"\r\n            variant={theme ? \"outlined\" : \"contained\"}\r\n            color=\"secondary\"\r\n            className=\"px-3 border-3\"\r\n            onClick={() => {\r\n              dispatch(resetBankForm());\r\n            }}\r\n          >\r\n            <RotateLeftOutlinedIcon fontSize=\"small\" />\r\n            &nbsp;&nbsp;Reset\r\n          </Button>\r\n\r\n          <Button\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            className={`px-3 mx-0 text-light bg-success`}\r\n            onClick={save}\r\n          >\r\n            <SaveIcon fontSize=\"small\" />\r\n            &nbsp;&nbsp;Save\r\n          </Button>\r\n\r\n          <Online>\r\n            <Button\r\n              size=\"large\"\r\n              disabled={loading ? true : false}\r\n              variant=\"contained\"\r\n              className={`bg-warning text-white`}\r\n              onClick={submit}\r\n            >\r\n              {loading ? (\r\n                // <i className=\"bricks-white\" />\r\n                <CircularProgress color=\"inherit\" size=\"25px\" thickness=\"5\" />\r\n              ) : (\r\n                <span style={{ display: \"flex\" }}>\r\n                  <CloudUploadOutlinedIcon /> &nbsp;&nbsp;Upload\r\n                </span>\r\n              )}\r\n            </Button>\r\n          </Online>\r\n\r\n          <Offline>\r\n            <Button\r\n              size=\"large\"\r\n              disabled\r\n              variant=\"contained\"\r\n              className={`text-light btn-warning`}\r\n            >\r\n              <WifiOffRoundedIcon />\r\n              &nbsp;&nbsp;Offline\r\n            </Button>\r\n          </Offline>\r\n        </div>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BankForm;\r\n","D:\\REACT\\mhco\\src\\screens\\Bank\\SavedData.js",[],"D:\\REACT\\mhco\\src\\components\\Navbar\\Navbar.js",[],"D:\\REACT\\mhco\\src\\urlConstants.js",[],"D:\\REACT\\mhco\\src\\Context.js",[],"D:\\REACT\\mhco\\src\\components\\AddBankDialog\\AddBank.js",[],"D:\\REACT\\mhco\\src\\components\\BanksList\\BanksList.js",[],"D:\\REACT\\mhco\\src\\redux\\banksListSlice.js",[],"D:\\REACT\\mhco\\src\\screens\\Invoice\\Form.js",["171"],"D:\\REACT\\mhco\\src\\screens\\Invoice\\Saved.js",["172"],"import {\r\n  Checkbox,\r\n  Chip,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DeleteRoundedIcon from \"@material-ui/icons/DeleteRounded\";\r\nimport CreateRoundedIcon from \"@material-ui/icons/CreateRounded\";\r\nimport {\r\n  individualInvoiceRequestSelect,\r\n  removeInvoiceSingleRequests,\r\n} from \"../../redux/invoice/invoiceSavedDataSlice\";\r\nimport { setInvoice } from \"../../redux/invoice/invoiceFormSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useIt } from \"../../Context\";\r\nimport { BrowserView } from \"react-device-detect\";\r\n\r\nvar currencyFormatter = require(\"currency-formatter\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flag: {\r\n    height: \"18px\",\r\n  },\r\n  payee: {\r\n    textTransform: \"capitalize\",\r\n  },\r\n  gif: {\r\n    width: \"fit-content\",\r\n    margin: \"auto\",\r\n    padding: \"2% 5%\",\r\n  },\r\n}));\r\n\r\nfunction Saved() {\r\n  const dispatch = useDispatch();\r\n  const invoiceSavedData = useSelector((state) => state.invoiceSavedData.value);\r\n  const loading = useSelector((state) => state.invoiceSavedData.loading);\r\n  const theme = useSelector((state) => state.screen.theme);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { date } = useIt();\r\n  const user = useSelector((state) => state.auth.user);\r\n\r\n  useEffect(() => {\r\n    !user.access.invoice && !user.access.payment && history.push(\"/noaccess\");\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\"body\").scrollTo(0, 0);\r\n  });\r\n\r\n  const edit = (item, index) => {\r\n    history.push(\"/invoice/form\");\r\n    var a = item.data;\r\n    dispatch(setInvoice(a));\r\n    dispatch(removeInvoiceSingleRequests(index));\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {invoiceSavedData.length === 0 && (\r\n        <Paper className={classes.gif}>\r\n          {\r\n            theme\r\n              ? \"nodata\"\r\n              : // <img src='/EmptyLight.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n                \"nodata\"\r\n            // <img src='/EmptyDark.gif' style={{ height: '50%', objectFit: 'contain', margin: 'auto' }} alt='' />\r\n          }\r\n        </Paper>\r\n      )}\r\n\r\n      <section className=\"\">\r\n        {invoiceSavedData.map((item, index) => (\r\n          <Paper\r\n            key={index}\r\n            className=\"mb-4 p-2 row p-0 m-0 align-items-center justify-content-between\"\r\n          >\r\n            <div className=\"col-lg-6 col-sm-12\">\r\n              <div>\r\n                <small>{date(item.data.date)}</small>&nbsp;&nbsp;&nbsp;\r\n                <small>\r\n                  {item.data.customer.mobile + \" || \" + item.data.customer.name}\r\n                </small>\r\n              </div>\r\n\r\n              <div\r\n                className=\"my-3\"\r\n                style={{ display: \"flex\", alignItems: \"center\" }}\r\n              >\r\n                <img\r\n                  className={`border ${classes.flag}`}\r\n                  src={`/flags/${item.data.currency.substring(0, 3)}.png`}\r\n                  alt=\"\"\r\n                  onError={(e) => {\r\n                    e.target.onerror = null;\r\n                    e.target.src = \"/flags/default.png\";\r\n                  }}\r\n                />\r\n                &nbsp;&nbsp;&nbsp;\r\n                <b>\r\n                  {currencyFormatter.format(item.data.paymentAmount, {\r\n                    code: item.data.currency.substring(0, 3),\r\n                  })}\r\n                </b>\r\n                <b>&nbsp;&nbsp;{item.data.type}</b>\r\n                &nbsp;&nbsp;\r\n                {item.data.cheque && (\r\n                  <Chip\r\n                    label={item.data.cheque}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <BrowserView>\r\n                <div\r\n                  className=\"my-3\"\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  {item.data.weight && (\r\n                    <table\r\n                      border=\"1\"\r\n                      cellPadding=\"10\"\r\n                      className={!theme && \"text-light\"}\r\n                    >\r\n                      <tr className=\"text-center\">\r\n                        <th>WGT</th>\r\n                        <th>TARE</th>\r\n                        <th>T WGT</th>\r\n                        <th>PRICE</th>\r\n                        <th>DISC</th>\r\n                        <th>T AMT</th>\r\n                      </tr>\r\n                      <tr className=\"text-center\">\r\n                        <td>{item.data.weight}</td>\r\n                        <td>{item.data.tare}</td>\r\n                        <td>{item.data.weight - item.data.tare}</td>\r\n                        <td>{item.data.unitPrice}</td>\r\n                        <td>{item.data.discount}</td>\r\n                        <td>\r\n                          {Math.round(\r\n                            (item.data.weight - item.data.tare) *\r\n                              item.data.unitPrice -\r\n                              item.data.discount,\r\n                            2\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                  )}\r\n                </div>\r\n              </BrowserView>\r\n\r\n              {/* <div>\r\n                                <b className={classes.payee}>{item.data.payee}</b>\r\n                            </div> */}\r\n            </div>\r\n\r\n            <div className=\"col-lg-6 col-sm-* text-right align-items-center\">\r\n              <Chip\r\n                className={`text-light ${\r\n                  item.data.memo ? \"bg-success px-1\" : \"bg-danger px-2\"\r\n                }  mx-2`}\r\n                size=\"small\"\r\n                label={item.data.memo ? \"PAYMENT\" : \"INVOICE\"}\r\n              />\r\n\r\n              <IconButton\r\n                onClick={() => dispatch(removeInvoiceSingleRequests(index))}\r\n              >\r\n                <DeleteRoundedIcon />\r\n              </IconButton>\r\n\r\n              <IconButton onClick={() => edit(item, index)}>\r\n                <CreateRoundedIcon />\r\n              </IconButton>\r\n\r\n              <Checkbox\r\n                color=\"primary\"\r\n                value={index}\r\n                checked={item.checked}\r\n                onChange={(e) =>\r\n                  dispatch(individualInvoiceRequestSelect(e.target))\r\n                }\r\n                disabled={loading ? true : false}\r\n              />\r\n            </div>\r\n          </Paper>\r\n        ))}\r\n      </section>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Saved;\r\n","D:\\REACT\\mhco\\src\\redux\\bank\\bankFormSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\bank\\bankSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceFormSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\payment\\paymentSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\invoice\\invoiceSavedDataSlice.js",[],"D:\\REACT\\mhco\\src\\redux\\payment\\paymentFormSlice.js",[],"D:\\REACT\\mhco\\src\\screens\\Payment\\Form.js",["173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IconButton, InputAdornment, MenuItem, TextField } from '@material-ui/core';\r\nimport { setPaymentData } from '../../redux/payment/paymentFormSlice';\r\nimport Calendar from '../../components/Calendar/Calendar'\r\nimport CurrencyList from '../../components/CurrencyList/CurrencyList';\r\nimport copy from 'copy-to-clipboard';\r\nimport { setBankData, resetBankForm } from '../../redux/bank/bankFormSlice'\r\nimport CloudUploadOutlinedIcon from '@material-ui/icons/CloudUploadOutlined';\r\nimport RotateLeftOutlinedIcon from '@material-ui/icons/RotateLeftOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { openSnackbar, toggleLoading } from '../../redux/screenSlice'\r\nimport { Offline, Online } from \"react-detect-offline\";\r\nimport ToggleButtons from '../../components/ToggleButtons/ToggleButtons'\r\nimport WifiOffRoundedIcon from '@material-ui/icons/WifiOffRounded';\r\nimport { setbankSavedData } from '../../redux/bank/bankSavedDataSlice'\r\nimport { useIt } from '../../Context'\r\nimport BanksList from '../../components/BanksList/BanksList'\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport { nanoid } from 'nanoid'\r\nimport { BASE_URL } from '../../urlConstants'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    large: {\r\n        // width: theme.spacing(15),\r\n        width: theme.spacing(17),\r\n        height: theme.spacing(17),\r\n        // height: theme.spacing(15),\r\n    },\r\n}));\r\nconst transactionType = ['Shop', 'Office', 'Godam', 'Other']\r\nconst paymentType = ['Cheque', 'Cash', 'Credit/Debit Card', 'Online/Atm', 'Bank Deposit']\r\n\r\nexport default function Payment() {\r\n    const classes = useStyles();\r\n    const theme = useSelector(state => state.screen.theme)\r\n    const dispatch = useDispatch()\r\n    const paymentForm = useSelector(state => state.paymentForm)\r\n    const amount = useRef()\r\n    const form = useRef()\r\n    const [selectedValue, setSelectedValue] = useState(paymentForm.debit ? 'debit' : 'credit')\r\n    const loading = useSelector(state => state.screen.loading)\r\n    // const { uploadData, getBanksList } = useIt()\r\n\r\n    useEffect(() => {\r\n        // if (!localStorage.banksList) getBanksList()\r\n    }, [])\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault()\r\n        // form.current.checkValidity() ? uploadData([paymentForm], toggleLoading, BASE_URL) : form.current.reportValidity()\r\n    }\r\n\r\n    const setData = (key, value) => {\r\n        dispatch(setPaymentData({ key: key, value: value }))\r\n    }\r\n\r\n    return (\r\n        <form ref={form} className='row py-2 justify-content-between' onSubmit={(e) => e.preventDefault()}>\r\n            <div className=\"col-md-2 col-12 align-self-center\">\r\n                <div className='mb-4 pb-2'>\r\n                    <Avatar src=\"/static/images/avatar/1.jpg\" className={`mx-auto ${classes.large}`} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-10 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <section className=\"row align-items-center\">\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Search Customer\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Customer Mobile\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                        </section>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                        <section className=\"row align-items-center\">\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Customer Detail\" className='mb-4 pb-2 w-100' />\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <div className=\"mb-4 pb-2\">\r\n                                    <CurrencyList currency={paymentForm.currency} setCurrency={(e) => setData('currency', e)} />\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            <div className='col-md-6 col-sm-12 align-self-center'>\r\n                <div className=\"mb-4 pb-2\">\r\n                    <Calendar date={paymentForm.date} handler={(e) => setData('date', e.toString())} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Account\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    \r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Cheque/Other No.\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Select Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {transactionType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Amount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Payment Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {paymentType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                    {/* <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Discount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div> */}\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Note\" className='mb-4 pb-2 w-100' required />\r\n                    </div>\r\n\r\n                </section>\r\n            </div>\r\n\r\n            <div className=\"col-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-8 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.memo || ''} onChange={(e) => setData('memo', e.target.value)} variant=\"outlined\" multiline label=\"Memo\" className='w-100 mb-4' />\r\n                    </div>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <TextField\r\n                            required\r\n                            value={paymentForm.code || ''}\r\n                            onChange={(e) => setData('code', e.target.value)}\r\n                            variant=\"outlined\"\r\n                            label=\"Code\" disabled className='w-100 mb-4'\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => copy(paymentForm.code)}>\r\n                                            <FileCopyOutlinedIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            {/* <div className=\"col-md-6 col-sm-12\">\r\n                <div className=\"mb-4 pb-2\">\r\n                    <CurrencyList currency={paymentForm.currency} setCurrency={(e) => setData('currency', e)} />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.payeeBank || ''} onChange={(e) => setData('payeeBank', e.target.value)} variant=\"outlined\" label=\"Payee's Bank\" className='w-100 mb-4 pb-2' inputProps={{ className: 'text-capitalize' }} />\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <TextField required value={paymentForm.payee || ''} onChange={(e) => setData('payee', e.target.value)} variant=\"outlined\" label=\"Payee Name\" className='w-100  mb-4 pb-2' inputProps={{ className: 'text-capitalize' }} />\r\n            </div>\r\n            <div className='col-md-6 col-sm-12 align-self-center'>\r\n                <div className=\"mb-4 pb-2\">\r\n                    <Calendar date={paymentForm.date} handler={(e) => setData('date', e.toString())} />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-6 col-sm-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.cheque || ''} type='number' onChange={(e) => setData(\"cheque\", e.target.value)} variant=\"outlined\" label=\"Cheque/Other no\" className='w-100 mb-4 pb-2' />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField required value={paymentForm.type} variant=\"outlined\" select label=\"Select Type\" className='w-100 mb-4 pb-2' onChange={(e) => setData('type', e.target.value)}>\r\n                            {transactionType.map((item) =>\r\n                                <MenuItem key={item} value={item}> {item} </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <TextField value={paymentForm[selectedValue]} inputRef={amount} variant=\"outlined\" label=\"Amount\" fullwidth=\"true\" className='w-100 mb-4 pb-2' inputProps={{ min: \"0.01\", step: \"0.01\" }} type=\"number\" required onChange={(e) => setData(selectedValue, e.target.value)}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        {paymentForm.currency.substring(0, 3)}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-6 col-sm-12\">\r\n                        <div className=\" mb-4 pb-2\">\r\n                            <ToggleButtons value={selectedValue} setValue={(e) => setSelectedValue(e)} amount={amount} />\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note1 || ''} onChange={(e) => setData('note1', e.target.value)} variant=\"outlined\" label=\"Note 1\" className='mb-4 pb-2 w-100' />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-12\">\r\n                        <TextField value={paymentForm.note2 || ''} onChange={(e) => setData('note2', e.target.value)} variant=\"outlined\" label=\"Note 2\" className='mb-4 pb-2 w-100' />\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <div className=\"col-12\">\r\n                <section className=\"row align-items-center\">\r\n                    <div className=\"col-md-8 col-sm-12\">\r\n                        <TextField required={paymentForm.type === 'Other' ? false : true} value={paymentForm.memo || ''} onChange={(e) => setData('memo', e.target.value)} variant=\"outlined\" multiline label=\"Memo\" className='w-100 mb-4' />\r\n                    </div>\r\n                    <div className=\"col-md-4 col-sm-12\">\r\n                        <TextField\r\n                            required\r\n                            value={paymentForm.code || ''}\r\n                            onChange={(e) => setData('code', e.target.value)}\r\n                            variant=\"outlined\"\r\n                            label=\"Code\" disabled className='w-100 mb-4'\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton onClick={() => copy(paymentForm.code)}>\r\n                                            <FileCopyOutlinedIcon />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </section>\r\n            </div> */}\r\n            {/* <div className=\"text-center mt-0 mt-lg-4 col-lg-5 col-md-7 col-sm-12 mx-auto p-1\" style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                <Button size=\"large\" type=\"button\" variant={theme ? \"outlined\" : \"contained\"} color=\"secondary\" className=\"px-3 border-3\" onClick={() => { dispatch(resetBankForm()); }}><RotateLeftOutlinedIcon fontSize=\"small\" />&nbsp;&nbsp;Reset</Button>\r\n\r\n                <Button size=\"large\" variant=\"contained\" className={`px-3 mx-0 text-light bg-success`} onClick={save}><SaveIcon fontSize=\"small\" />&nbsp;&nbsp;Save</Button>\r\n\r\n                <Online>\r\n                    <Button size=\"large\" disabled={loading ? true : false} variant=\"contained\" className={`bg-warning text-white`} onClick={submit}>{loading ? <i className=\"bricks-white\" /> : <span style={{ display: 'flex' }}><CloudUploadOutlinedIcon /> &nbsp;&nbsp;Upload</span>}</Button>\r\n                </Online>\r\n\r\n                <Offline>\r\n                    <Button size=\"large\" disabled variant=\"contained\" className={`text-light btn-warning`}><WifiOffRoundedIcon />&nbsp;&nbsp;Offline</Button>\r\n                </Offline>\r\n            </div> */}\r\n        </form>\r\n    )\r\n}\r\n","D:\\REACT\\mhco\\src\\screens\\Payment\\Saved.js",[],"D:\\REACT\\mhco\\src\\components\\AddCustomerDialog\\AddCustomer.js",[],"D:\\REACT\\mhco\\src\\components\\CustomersList\\CustomersList.js",["193","194","195","196","197"],"import { Avatar, ListItem, ListItemAvatar, ListItemText, TextField, Typography } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport React, { Fragment, useEffect, useState } from 'react'\r\nimport '../BanksList/style.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useIt } from '../../Context';\r\nimport { setCustomerData } from '../../redux/bank/bankFormSlice';\r\nimport clsx from 'clsx';\r\nimport { Offline, Online } from 'react-detect-offline';\r\nimport { GOOGLE_IMAGE } from '../../urlConstants';\r\n\r\nexport default function CustomersList({ value, setCustomer }) {\r\n    const { getCustomersList } = useIt()\r\n    const loading = useSelector(state => state.customersList.loading)\r\n    const data = useSelector(state => state.customersList.data)\r\n    const theme = useSelector(state => state.screen.theme)\r\n\r\n    return (\r\n        <Autocomplete\r\n            className={`w-100 mb-4 pb-2`}\r\n            value={value}\r\n            defaultValue={value}\r\n            getOptionLabel={(option) => option.NAME||option.name}\r\n            onChange={(event, newValue) => {\r\n                if (newValue) {\r\n                    setCustomer({\r\n                        mobile: newValue.MOBILE,\r\n                        image: newValue.IMAGE,\r\n                        name: newValue.NAME,\r\n                        detail: newValue.DETAILS,\r\n                    })\r\n                }\r\n            }}\r\n            renderOption={(option) =>\r\n                <ListItem className=\"w-100 p-0\">\r\n                    <ListItemAvatar>\r\n                        <Avatar src={GOOGLE_IMAGE + option.IMAGE} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={option.NAME} secondary={option.MOBILE} />\r\n                </ListItem>\r\n            }\r\n            filterSelectedOptions\r\n            disabled={loading}\r\n            options={data}\r\n            renderInput={(params) =>\r\n                <TextField {...params}\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <Fragment>\r\n                                <Online>\r\n                                    {\r\n                                        loading\r\n                                            ? <i className={clsx({\r\n                                                'bricks-grey': theme,\r\n                                                'bricks-white': !theme,\r\n                                            })} />\r\n                                            : <svg style={{ cursor: 'pointer' }} onClick={getCustomersList} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\"><polyline points=\"1 4 1 10 7 10\" /><polyline points=\"23 20 23 14 17 14\" /><path d=\"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15\" /></svg>\r\n                                    }\r\n                                </Online>\r\n                                <Offline>\r\n                                    <svg style={{ cursor: 'not-allowed' }} width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-wifi-off\"><line x1={1} y1={1} x2={23} y2={23} /><path d=\"M16.72 11.06A10.94 10.94 0 0 1 19 12.55\" /><path d=\"M5 12.55a10.94 10.94 0 0 1 5.17-2.39\" /><path d=\"M10.71 5.05A16 16 0 0 1 22.58 9\" /><path d=\"M1.42 9a15.91 15.91 0 0 1 4.7-2.88\" /><path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\" /><line x1={12} y1={20} x2=\"12.01\" y2={20} /></svg>\r\n                                </Offline>\r\n                            </Fragment>\r\n                        ),\r\n                    }}\r\n                    label=\"Select Customer\" variant=\"outlined\" required />\r\n            }\r\n        />\r\n    )\r\n}","D:\\REACT\\mhco\\src\\redux\\customersListSlice.js",[],"D:\\REACT\\mhco\\src\\components\\NoAccess\\NoAccess.js",[],{"ruleId":"198","severity":1,"message":"199","line":8,"column":8,"nodeType":"200","messageId":"201","endLine":8,"endColumn":13},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"198","severity":1,"message":"206","line":13,"column":27,"nodeType":"200","messageId":"201","endLine":13,"endColumn":32},{"ruleId":"198","severity":1,"message":"207","line":24,"column":8,"nodeType":"200","messageId":"201","endLine":24,"endColumn":19},{"ruleId":"198","severity":1,"message":"208","line":25,"column":8,"nodeType":"200","messageId":"201","endLine":25,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":97,"column":6,"nodeType":"211","endLine":97,"endColumn":16,"suggestions":"212"},{"ruleId":"198","severity":1,"message":"213","line":20,"column":8,"nodeType":"200","messageId":"201","endLine":20,"endColumn":39},{"ruleId":"198","severity":1,"message":"214","line":18,"column":10,"nodeType":"200","messageId":"201","endLine":18,"endColumn":19},{"ruleId":"198","severity":1,"message":"215","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"209","severity":1,"message":"216","line":49,"column":6,"nodeType":"211","endLine":49,"endColumn":8,"suggestions":"217"},{"ruleId":"209","severity":1,"message":"218","line":69,"column":6,"nodeType":"211","endLine":69,"endColumn":12,"suggestions":"219"},{"ruleId":"209","severity":1,"message":"220","line":49,"column":6,"nodeType":"211","endLine":49,"endColumn":12,"suggestions":"221"},{"ruleId":"198","severity":1,"message":"222","line":10,"column":10,"nodeType":"200","messageId":"201","endLine":10,"endColumn":21},{"ruleId":"198","severity":1,"message":"223","line":10,"column":23,"nodeType":"200","messageId":"201","endLine":10,"endColumn":36},{"ruleId":"198","severity":1,"message":"224","line":11,"column":8,"nodeType":"200","messageId":"201","endLine":11,"endColumn":31},{"ruleId":"198","severity":1,"message":"225","line":12,"column":8,"nodeType":"200","messageId":"201","endLine":12,"endColumn":30},{"ruleId":"198","severity":1,"message":"226","line":13,"column":8,"nodeType":"200","messageId":"201","endLine":13,"endColumn":16},{"ruleId":"198","severity":1,"message":"227","line":14,"column":10,"nodeType":"200","messageId":"201","endLine":14,"endColumn":22},{"ruleId":"198","severity":1,"message":"228","line":14,"column":24,"nodeType":"200","messageId":"201","endLine":14,"endColumn":37},{"ruleId":"198","severity":1,"message":"229","line":15,"column":10,"nodeType":"200","messageId":"201","endLine":15,"endColumn":17},{"ruleId":"198","severity":1,"message":"230","line":15,"column":19,"nodeType":"200","messageId":"201","endLine":15,"endColumn":25},{"ruleId":"198","severity":1,"message":"231","line":16,"column":8,"nodeType":"200","messageId":"201","endLine":16,"endColumn":21},{"ruleId":"198","severity":1,"message":"232","line":17,"column":8,"nodeType":"200","messageId":"201","endLine":17,"endColumn":26},{"ruleId":"198","severity":1,"message":"233","line":18,"column":10,"nodeType":"200","messageId":"201","endLine":18,"endColumn":26},{"ruleId":"198","severity":1,"message":"206","line":19,"column":10,"nodeType":"200","messageId":"201","endLine":19,"endColumn":15},{"ruleId":"198","severity":1,"message":"234","line":20,"column":8,"nodeType":"200","messageId":"201","endLine":20,"endColumn":17},{"ruleId":"198","severity":1,"message":"235","line":22,"column":10,"nodeType":"200","messageId":"201","endLine":22,"endColumn":16},{"ruleId":"198","severity":1,"message":"236","line":23,"column":10,"nodeType":"200","messageId":"201","endLine":23,"endColumn":18},{"ruleId":"198","severity":1,"message":"237","line":38,"column":11,"nodeType":"200","messageId":"201","endLine":38,"endColumn":16},{"ruleId":"198","severity":1,"message":"238","line":43,"column":27,"nodeType":"200","messageId":"201","endLine":43,"endColumn":43},{"ruleId":"198","severity":1,"message":"239","line":44,"column":11,"nodeType":"200","messageId":"201","endLine":44,"endColumn":18},{"ruleId":"198","severity":1,"message":"240","line":51,"column":11,"nodeType":"200","messageId":"201","endLine":51,"endColumn":17},{"ruleId":"198","severity":1,"message":"241","line":1,"column":69,"nodeType":"200","messageId":"201","endLine":1,"endColumn":79},{"ruleId":"198","severity":1,"message":"215","line":3,"column":27,"nodeType":"200","messageId":"201","endLine":3,"endColumn":36},{"ruleId":"198","severity":1,"message":"242","line":3,"column":38,"nodeType":"200","messageId":"201","endLine":3,"endColumn":46},{"ruleId":"198","severity":1,"message":"243","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":21},{"ruleId":"198","severity":1,"message":"244","line":7,"column":10,"nodeType":"200","messageId":"201","endLine":7,"endColumn":25},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","no-native-reassign",["245"],"no-negated-in-lhs",["246"],"'useIt' is defined but never used.","'PaymentForm' is defined but never used.","'PaymentSaved' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["247"],"'AccountBalanceWalletRoundedIcon' is defined but never used.","'setAccess' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'getBanksList', 'history', and 'user.access.bank'. Either include them or remove the dependency array.",["248"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["249"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["250"],"'setBankData' is defined but never used.","'resetBankForm' is defined but never used.","'CloudUploadOutlinedIcon' is defined but never used.","'RotateLeftOutlinedIcon' is defined but never used.","'SaveIcon' is defined but never used.","'openSnackbar' is defined but never used.","'toggleLoading' is defined but never used.","'Offline' is defined but never used.","'Online' is defined but never used.","'ToggleButtons' is defined but never used.","'WifiOffRoundedIcon' is defined but never used.","'setbankSavedData' is defined but never used.","'BanksList' is defined but never used.","'nanoid' is defined but never used.","'BASE_URL' is defined but never used.","'theme' is assigned a value but never used.","'setSelectedValue' is assigned a value but never used.","'loading' is assigned a value but never used.","'submit' is assigned a value but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'setCustomerData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},"Update the dependencies array to be: [dispatch, location, user]",{"range":"259","text":"260"},"Update the dependencies array to be: [getBanksList, history, user.access.bank]",{"range":"261","text":"262"},"Update the dependencies array to be: [dispatch, history, user]",{"range":"263","text":"264"},"Update the dependencies array to be: [history, user]",{"range":"265","text":"266"},[2968,2978],"[dispatch, location, user]",[2111,2113],"[getBanksList, history, user.access.bank]",[2565,2571],"[dispatch, history, user]",[1504,1510],"[history, user]"]